<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retyped.node</name>
    </assembly>
    <members>
        <member name="P:Retyped.node.process2">
            <summary>
            *********************************************
            *
            GLOBAL                      *
            *
            **********************************************
            </summary>
        </member>
        <member name="P:Retyped.node.BufferType">
            <summary>
            Raw data is stored in instances of the Buffer class.
            A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.
            Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
            </summary>
        </member>
        <member name="M:Retyped.node.ErrorConstructor.captureStackTrace(Retyped.Primitive.Object)">
            <summary>
            Create .stack property on a target object
            </summary>
        </member>
        <member name="M:Retyped.node.ErrorConstructor.captureStackTrace(Retyped.Primitive.Object,Retyped.es5.Function)">
            <summary>
            Create .stack property on a target object
            </summary>
        </member>
        <member name="M:Retyped.node.ErrorConstructor.captureStackTrace(Retyped.Primitive.Object,System.Action)">
            <summary>
            Create .stack property on a target object
            </summary>
        </member>
        <member name="M:Retyped.node.ErrorConstructor.captureStackTrace(Retyped.Primitive.Object,System.Func{System.Object})">
            <summary>
            Create .stack property on a target object
            </summary>
        </member>
        <member name="P:Retyped.node.ErrorConstructor.prepareStackTrace">
            <summary>
            Optional override for formatting stack traces
            </summary>
            <seealso>https://github.com/v8/v8/wiki/Stack%20Trace%20API#customizing-stack-traces</seealso>
        </member>
        <member name="M:Retyped.node.String.trimLeft">
            <summary>
            Removes whitespace from the left end of a string.
            </summary>
        </member>
        <member name="M:Retyped.node.String.trimRight">
            <summary>
            Removes whitespace from the right end of a string.
            </summary>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(System.String,System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
            <param name = "encoding">encoding to use, optional.  Default is 'utf8'</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(Retyped.es5.Uint8Array)">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(Retyped.es5.ArrayBuffer)">
            <summary>
            Produces a Buffer backed by the same allocated memory as
            the given {ArrayBuffer}.
            </summary>
            <param name = "arrayBuffer">The ArrayBuffer with which to share memory.</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(System.Object[])">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.Buffer.#ctor(Retyped.node.Buffer)">
            <summary>
            Copies the passed {buffer} data onto a new {Buffer} instance.
            </summary>
            <param name = "buffer">The buffer to copy.</param>
        </member>
        <member name="T:Retyped.node.NodeJS">
            <summary>
            *********************************************
            *
            GLOBAL INTERFACES               *
            *
            **********************************************
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getThis">
            <summary>
            Value of "this"
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getTypeName">
            <summary>
            Type of "this" as a string.
            This is the name of the function stored in the constructor field of
            "this", if available.  Otherwise the object's [[Class]] internal
            property.
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getFunction">
            <summary>
            Current function
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getFunctionName">
            <summary>
            Name of the current function, typically its name property.
            If a name property is not available an attempt will be made to try
            to infer a name from the function's context.
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getMethodName">
            <summary>
            Name of the property [of "this" or one of its prototypes] that holds
            the current function
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getFileName">
            <summary>
            Name of the script [if this function was defined in a script]
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getLineNumber">
            <summary>
            Current line number [if this function was defined in a script]
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getColumnNumber">
            <summary>
            Current column number [if this function was defined in a script]
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.getEvalOrigin">
            <summary>
            A call site object representing the location where eval was called
            [if this function was created using a call to eval]
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.isToplevel">
            <summary>
            Is this a toplevel invocation, that is, is "this" the global object?
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.isEval">
            <summary>
            Does this call take place in code defined by a call to eval?
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.isNative">
            <summary>
            Is this call in native V8 code?
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.CallSite.isConstructor">
            <summary>
            Is this a constructor call?
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.beforeExit,Retyped.node.NodeJS.BeforeExitListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.disconnect,Retyped.node.NodeJS.DisconnectListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.exit,Retyped.node.NodeJS.ExitListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.rejectionHandled,Retyped.node.NodeJS.RejectionHandledListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.uncaughtException,Retyped.node.NodeJS.UncaughtExceptionListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.unhandledRejection,Retyped.node.NodeJS.UnhandledRejectionListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.warning,Retyped.node.NodeJS.WarningListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.message,Retyped.node.NodeJS.MessageListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.NodeJS.Signals,Retyped.node.NodeJS.SignalsListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.newListener,Retyped.node.NodeJS.NewListenerListener)" -->
        <!-- Badly formed XML comment ignored for member "M:Retyped.node.NodeJS.Process.addListener(Retyped.node.Literals.Types.removeListener,Retyped.node.NodeJS.RemoveListenerListener)" -->
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(System.String,System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
            <param name = "encoding">encoding to use, optional.  Default is 'utf8'</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(Retyped.es5.Uint8Array)">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(Retyped.es5.ArrayBuffer)">
            <summary>
            Produces a Buffer backed by the same allocated memory as
            the given {ArrayBuffer}.
            </summary>
            <param name = "arrayBuffer">The ArrayBuffer with which to share memory.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(System.Object[])">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.New(Retyped.node.Buffer)">
            <summary>
            Copies the passed {buffer} data onto a new {Buffer} instance.
            </summary>
            <param name = "buffer">The buffer to copy.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(Retyped.es5.ArrayBuffer)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(Bridge.Union{System.Object[],System.String,Retyped.node.Buffer,Retyped.es5.ArrayBuffer})">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.from(System.String,System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.isBuffer(System.Object)">
            <summary>
            Returns true if {obj} is a Buffer
            </summary>
            <param name = "obj">object to test.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.isEncoding(System.String)">
            <summary>
            Returns true if {encoding} is a valid encoding argument.
            Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
            </summary>
            <param name = "encoding">string to test.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer})">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer},System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.concat(Retyped.node.Buffer[])">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.concat(Retyped.node.Buffer[],System.Double)">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
            <param name = "totalLength">
            Total length of the buffers when concatenated.
            If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.
            </param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.compare(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            The same as buf1.compare(buf2).
            </summary>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.alloc(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double})">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double},System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.allocUnsafe(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="M:Retyped.node.NodeJS.Global.BufferTypeConfig.allocUnsafeSlow(System.Double)">
            <summary>
            Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="P:Retyped.node.NodeJS.Global.BufferTypeConfig.poolSize">
            <summary>
            This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.
            </summary>
        </member>
        <member name="T:Retyped.node.NodeBuffer">
            <summary>
            @deprecated
            </summary>
        </member>
        <member name="T:Retyped.node.buffer">
            <summary>
            *********************************************
            *
            MODULES                     *
            *
            **********************************************
            </summary>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(System.String,System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
            <param name = "encoding">encoding to use, optional.  Default is 'utf8'</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(Retyped.es5.Uint8Array)">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(Retyped.es5.ArrayBuffer)">
            <summary>
            Produces a Buffer backed by the same allocated memory as
            the given {ArrayBuffer}.
            </summary>
            <param name = "arrayBuffer">The ArrayBuffer with which to share memory.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(System.Object[])">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.New(Retyped.node.Buffer)">
            <summary>
            Copies the passed {buffer} data onto a new {Buffer} instance.
            </summary>
            <param name = "buffer">The buffer to copy.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(Retyped.es5.ArrayBuffer)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(Bridge.Union{System.Object[],System.String,Retyped.node.Buffer,Retyped.es5.ArrayBuffer})">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(System.Object[])">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(Retyped.node.Buffer)">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.from(System.String,System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.isBuffer(System.Object)">
            <summary>
            Returns true if {obj} is a Buffer
            </summary>
            <param name = "obj">object to test.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.isEncoding(System.String)">
            <summary>
            Returns true if {encoding} is a valid encoding argument.
            Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
            </summary>
            <param name = "encoding">string to test.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer})">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.node.Buffer)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.es5.DataView)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.es5.ArrayBuffer)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer},System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(System.String,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.node.Buffer,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.es5.DataView,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.byteLength(Retyped.es5.ArrayBuffer,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.concat(Retyped.node.Buffer[])">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.concat(Retyped.node.Buffer[],System.Double)">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
            <param name = "totalLength">
            Total length of the buffers when concatenated.
            If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.
            </param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.compare(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            The same as buf1.compare(buf2).
            </summary>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double})">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,Retyped.node.Buffer)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double},System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,System.String,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,Retyped.node.Buffer,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.alloc(System.Double,System.Double,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.allocUnsafe(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="M:Retyped.node.buffer.BufferTypeConfig.allocUnsafeSlow(System.Double)">
            <summary>
            Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="P:Retyped.node.buffer.BufferTypeConfig.poolSize">
            <summary>
            This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.
            </summary>
        </member>
        <member name="T:Retyped.node.http.ServerRequest">
            <summary>
            @deprecated Use IncomingMessage
            </summary>
        </member>
        <member name="P:Retyped.node.http.IncomingMessage.method">
            <summary>
            Only valid for request obtained from http.Server.
            </summary>
        </member>
        <member name="P:Retyped.node.http.IncomingMessage.url">
            <summary>
            Only valid for request obtained from http.Server.
            </summary>
        </member>
        <member name="P:Retyped.node.http.IncomingMessage.statusCode">
            <summary>
            Only valid for response obtained from http.ClientRequest.
            </summary>
        </member>
        <member name="P:Retyped.node.http.IncomingMessage.statusMessage">
            <summary>
            Only valid for response obtained from http.ClientRequest.
            </summary>
        </member>
        <member name="T:Retyped.node.http.ClientResponse">
            <summary>
            @deprecated Use IncomingMessage
            </summary>
        </member>
        <member name="P:Retyped.node.http.AgentOptions.keepAlive">
            <summary>
            Keep sockets around in a pool to be used by other requests in the future. Default = false
            </summary>
        </member>
        <member name="P:Retyped.node.http.AgentOptions.keepAliveMsecs">
            <summary>
            When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.
            Only relevant if keepAlive is set to true.
            </summary>
        </member>
        <member name="P:Retyped.node.http.AgentOptions.maxSockets">
            <summary>
            Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity
            </summary>
        </member>
        <member name="P:Retyped.node.http.AgentOptions.maxFreeSockets">
            <summary>
            Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.
            </summary>
        </member>
        <member name="M:Retyped.node.http.Agent.destroy">
            <summary>
            Destroy any sockets that are currently in use by the agent.
            It is usually not necessary to do this. However, if you are using an agent with KeepAlive enabled,
            then it is best to explicitly shut down the agent when you know that it will no longer be used. Otherwise,
            sockets may hang open for quite a long time before the server terminates them.
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.addListener(System.String,Retyped.node.cluster.addListenerFn)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(System.String,Retyped.node.cluster.Worker.addListenerFn)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(Retyped.node.Literals.Types.disconnect,System.Action)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(Retyped.node.Literals.Types.error,Retyped.node.cluster.Worker.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(Retyped.node.Literals.Types.exit,Retyped.node.cluster.Worker.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(Retyped.node.Literals.Types.listening,Retyped.node.cluster.Worker.addListenerFn4)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Worker.addListener(Retyped.node.Literals.Types.message,Retyped.node.cluster.Worker.addListenerFn5)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. error
            3. exit
            4. listening
            5. message
            6. online
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(System.String,Retyped.node.cluster.Cluster.addListenerFn)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(Retyped.node.Literals.Types.disconnect,Retyped.node.cluster.Cluster.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(Retyped.node.Literals.Types.exit,Retyped.node.cluster.Cluster.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(Retyped.node.Literals.Types.fork,Retyped.node.cluster.Cluster.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(Retyped.node.Literals.Types.listening,Retyped.node.cluster.Cluster.addListenerFn4)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.cluster.Cluster.addListener(Retyped.node.Literals.Types.message,Retyped.node.cluster.Cluster.addListenerFn5)">
            <summary>
            events.EventEmitter
            1. disconnect
            2. exit
            3. fork
            4. listening
            5. message
            6. online
            7. setup
            </summary>
        </member>
        <member name="M:Retyped.node.repl.REPLServer.addListener(System.String,Retyped.node.repl.REPLServer.addListenerFn)">
            <summary>
            events.EventEmitter
            1. exit
            2. reset
            </summary>
        </member>
        <member name="M:Retyped.node.repl.REPLServer.addListener(Retyped.node.Literals.Types.exit,System.Action)">
            <summary>
            events.EventEmitter
            1. exit
            2. reset
            </summary>
        </member>
        <member name="M:Retyped.node.repl.REPLServer.addListener(Retyped.node.Literals.Types.reset,Retyped.node.repl.REPLServer.addListenerFn)">
            <summary>
            events.EventEmitter
            1. exit
            2. reset
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(System.String,Retyped.node.readline.ReadLine.addListenerFn)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.line,Retyped.node.readline.ReadLine.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.pause,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.resume,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.SIGCONT,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.SIGINT,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.readline.ReadLine.addListener(Retyped.node.Literals.Types.SIGTSTP,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. line
            3. pause
            4. resume
            5. SIGCONT
            6. SIGINT
            7. SIGTSTP
            </summary>
        </member>
        <member name="M:Retyped.node.vm.runInDebugContext(System.String)">
            <summary>
            @deprecated
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(System.String,Retyped.node.child_process.ChildProcess.addListenerFn)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(Retyped.node.Literals.Types.close,Retyped.node.child_process.ChildProcess.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(Retyped.node.Literals.Types.disconnect,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(Retyped.node.Literals.Types.error,Retyped.node.child_process.ChildProcess.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(Retyped.node.Literals.Types.exit,Retyped.node.child_process.ChildProcess.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.child_process.ChildProcess.addListener(Retyped.node.Literals.Types.message,Retyped.node.child_process.ChildProcess.addListenerFn4)">
            <summary>
            events.EventEmitter
            1. close
            2. disconnect
            3. error
            4. exit
            5. message
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(System.String,Retyped.node.net.Socket.addListenerFn)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.close,Retyped.node.net.Socket.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.connect,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.data,Retyped.node.net.Socket.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.drain,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.end,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.error,Retyped.node.net.Socket.addListenerFn4)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.lookup,Retyped.node.net.Socket.addListenerFn5)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Socket.addListener(Retyped.node.Literals.Types.timeout,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connect
            3. data
            4. drain
            5. end
            6. error
            7. lookup
            8. timeout
            </summary>
        </member>
        <member name="M:Retyped.node.net.Server.addListener(System.String,Retyped.node.net.Server.addListenerFn)">
            <summary>
            events.EventEmitter
            1. close
            2. connection
            3. error
            4. listening
            </summary>
        </member>
        <member name="M:Retyped.node.net.Server.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connection
            3. error
            4. listening
            </summary>
        </member>
        <member name="M:Retyped.node.net.Server.addListener(Retyped.node.Literals.Types.connection,Retyped.node.net.Server.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. connection
            3. error
            4. listening
            </summary>
        </member>
        <member name="M:Retyped.node.net.Server.addListener(Retyped.node.Literals.Types.error,Retyped.node.net.Server.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. close
            2. connection
            3. error
            4. listening
            </summary>
        </member>
        <member name="M:Retyped.node.net.Server.addListener(Retyped.node.Literals.Types.listening,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. connection
            3. error
            4. listening
            </summary>
        </member>
        <member name="M:Retyped.node.dgram.Socket.addListener(System.String,Retyped.node.dgram.Socket.addListenerFn)">
            <summary>
            events.EventEmitter
            1. close
            2. error
            3. listening
            4. message
            </summary>
        </member>
        <member name="M:Retyped.node.dgram.Socket.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. error
            3. listening
            4. message
            </summary>
        </member>
        <member name="M:Retyped.node.dgram.Socket.addListener(Retyped.node.Literals.Types.error,Retyped.node.dgram.Socket.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. close
            2. error
            3. listening
            4. message
            </summary>
        </member>
        <member name="M:Retyped.node.dgram.Socket.addListener(Retyped.node.Literals.Types.listening,System.Action)">
            <summary>
            events.EventEmitter
            1. close
            2. error
            3. listening
            4. message
            </summary>
        </member>
        <member name="M:Retyped.node.dgram.Socket.addListener(Retyped.node.Literals.Types.message,Retyped.node.dgram.Socket.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. close
            2. error
            3. listening
            4. message
            </summary>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(System.String,System.String,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(System.String,Retyped.node.Buffer,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(System.String,Retyped.node.url.URL,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.Buffer,System.String,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.url.URL,System.String,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.node.fs.rename2Fn)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(System.String,System.String)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(System.String,Retyped.node.Buffer)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(System.String,Retyped.node.url.URL)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.renameSync(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Synchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.fs.PathLike,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(System.String,System.Double,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(System.String,Retyped.Primitive.Null,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.Buffer,System.Double,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.url.URL,System.Double,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.fs.PathLike,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(System.String,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.Buffer,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate2(Retyped.node.url.URL,Retyped.node.fs.truncate2Fn)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(System.String)">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.Buffer)">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.url.URL)">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.fs.PathLike,System.Nullable{System.Double})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Nullable{System.Double})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(System.String,System.Nullable{System.Double})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.Buffer,System.Nullable{System.Double})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncateSync(Retyped.node.url.URL,System.Nullable{System.Double})">
            <summary>
            Synchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate2(System.Double,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.ftruncate2Fn)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate2(System.Double,System.Double,Retyped.node.fs.ftruncate2Fn)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate2(System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.ftruncate2Fn)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate2(System.Double,Retyped.Primitive.Null,Retyped.node.fs.ftruncate2Fn)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate2(System.Double,Retyped.node.fs.ftruncate2Fn)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncateSync(System.Double)">
            <summary>
            Synchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncateSync(System.Double,System.Nullable{System.Double})">
            <summary>
            Synchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.chown2(Retyped.node.fs.PathLike,System.Double,System.Double,Retyped.node.fs.chown2Fn)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double,Retyped.node.fs.chown2Fn)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown2(System.String,System.Double,System.Double,Retyped.node.fs.chown2Fn)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown2(Retyped.node.Buffer,System.Double,System.Double,Retyped.node.fs.chown2Fn)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown2(Retyped.node.url.URL,System.Double,System.Double,Retyped.node.fs.chown2Fn)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chownSync(Retyped.node.fs.PathLike,System.Double,System.Double)">
            <summary>
            Synchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chownSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Synchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chownSync(System.String,System.Double,System.Double)">
            <summary>
            Synchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chownSync(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Synchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chownSync(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Synchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.fchown2(System.Double,System.Double,System.Double,Retyped.node.fs.fchown2Fn)">
            <summary>
            Asynchronous fchown(2) - Change ownership of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.fchownSync(System.Double,System.Double,System.Double)">
            <summary>
            Synchronous fchown(2) - Change ownership of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown2(Retyped.node.fs.PathLike,System.Double,System.Double,Retyped.node.fs.lchown2Fn)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double,Retyped.node.fs.lchown2Fn)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown2(System.String,System.Double,System.Double,Retyped.node.fs.lchown2Fn)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown2(Retyped.node.Buffer,System.Double,System.Double,Retyped.node.fs.lchown2Fn)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown2(Retyped.node.url.URL,System.Double,System.Double,Retyped.node.fs.lchown2Fn)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchownSync(Retyped.node.fs.PathLike,System.Double,System.Double)">
            <summary>
            Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchownSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchownSync(System.String,System.Double,System.Double)">
            <summary>
            Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchownSync(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchownSync(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(System.String,System.String,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(System.String,System.Double,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Retyped.node.Buffer,System.String,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Retyped.node.Buffer,System.Double,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Retyped.node.url.URL,System.String,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod2(Retyped.node.url.URL,System.Double,Retyped.node.fs.chmod2Fn)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(System.String,System.String)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(System.String,System.Double)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmodSync(Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod2(System.Double,Bridge.Union{System.String,System.Double},Retyped.node.fs.fchmod2Fn)">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod2(System.Double,System.String,Retyped.node.fs.fchmod2Fn)">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod2(System.Double,System.Double,Retyped.node.fs.fchmod2Fn)">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmodSync(System.Double,Bridge.Union{System.String,System.Double})">
            <summary>
            Synchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmodSync(System.Double,System.String)">
            <summary>
            Synchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmodSync(System.Double,System.Double)">
            <summary>
            Synchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(System.String,System.String,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(System.String,System.Double,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Retyped.node.Buffer,System.String,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Retyped.node.Buffer,System.Double,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Retyped.node.url.URL,System.String,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod2(Retyped.node.url.URL,System.Double,Retyped.node.fs.lchmod2Fn)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(System.String,System.String)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(System.String,System.Double)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmodSync(Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.stat2(Retyped.node.fs.PathLike,Retyped.node.fs.stat2Fn)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.stat2Fn)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat2(System.String,Retyped.node.fs.stat2Fn)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat2(Retyped.node.Buffer,Retyped.node.fs.stat2Fn)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat2(Retyped.node.url.URL,Retyped.node.fs.stat2Fn)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.statSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.statSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.statSync(System.String)">
            <summary>
            Synchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.statSync(Retyped.node.Buffer)">
            <summary>
            Synchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.statSync(Retyped.node.url.URL)">
            <summary>
            Synchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.fstat2(System.Double,Retyped.node.fs.fstat2Fn)">
            <summary>
            Asynchronous fstat(2) - Get file status.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.fstatSync(System.Double)">
            <summary>
            Synchronous fstat(2) - Get file status.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat2(Retyped.node.fs.PathLike,Retyped.node.fs.lstat2Fn)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.lstat2Fn)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat2(System.String,Retyped.node.fs.lstat2Fn)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat2(Retyped.node.Buffer,Retyped.node.fs.lstat2Fn)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat2(Retyped.node.url.URL,Retyped.node.fs.lstat2Fn)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstatSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstatSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstatSync(System.String)">
            <summary>
            Synchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstatSync(Retyped.node.Buffer)">
            <summary>
            Synchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstatSync(Retyped.node.url.URL)">
            <summary>
            Synchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(System.String,System.String,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(System.String,Retyped.node.Buffer,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(System.String,Retyped.node.url.URL,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.Buffer,System.String,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.url.URL,System.String,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.node.fs.link2Fn)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(System.String,System.String)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(System.String,Retyped.node.Buffer)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(System.String,Retyped.node.url.URL)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.linkSync(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Synchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,Bridge.Union{System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,System.String,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,System.String,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.Buffer,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.url.URL,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,System.String,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,System.String,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.Buffer,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.url.URL,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,System.String,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,System.String,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.Buffer,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.url.URL,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.Buffer,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(System.String,Retyped.node.url.URL,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,System.String,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.node.fs.symlink2Fn)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Retyped.node.Buffer)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Retyped.node.url.URL)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,System.String,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(System.String,Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.Buffer,Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlinkSync(Retyped.node.url.URL,Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.fs.readlink2Config,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.BufferEncoding,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.BufferEncoding,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.BufferEncoding,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer},Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readlink2Fn2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config3,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config3,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,System.String,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,System.String,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,System.String,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readlink2Fn3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.fs.PathLike,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(System.String,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.Buffer,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink2(Retyped.node.url.URL,Retyped.node.fs.readlink2Fn)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlinkSyncConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlinkSyncConfig2,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(System.String,System.String)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlinkSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.fs.readlink2Config,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.BufferEncoding,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.BufferEncoding,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.BufferEncoding,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer},Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.fs.readlink2Config2,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.Literals.Types.buffer,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer,Retyped.node.fs.realpath2Fn2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config3,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config3,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.fs.readlink2Config3,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,System.String,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config3,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,System.String,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config3,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,System.String,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.realpath2Fn3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.fs.PathLike,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(System.String,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.Buffer,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath2(Retyped.node.url.URL,Retyped.node.fs.realpath2Fn)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlinkSyncConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlinkSyncConfig2,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(System.String,System.String)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpathSync2(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink2(Retyped.node.fs.PathLike,Retyped.node.fs.unlink2Fn)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.unlink2Fn)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink2(System.String,Retyped.node.fs.unlink2Fn)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink2(Retyped.node.Buffer,Retyped.node.fs.unlink2Fn)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink2(Retyped.node.url.URL,Retyped.node.fs.unlink2Fn)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlinkSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlinkSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlinkSync(System.String)">
            <summary>
            Synchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlinkSync(Retyped.node.Buffer)">
            <summary>
            Synchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlinkSync(Retyped.node.url.URL)">
            <summary>
            Synchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir2(Retyped.node.fs.PathLike,Retyped.node.fs.rmdir2Fn)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.rmdir2Fn)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir2(System.String,Retyped.node.fs.rmdir2Fn)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir2(Retyped.node.Buffer,Retyped.node.fs.rmdir2Fn)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir2(Retyped.node.url.URL,Retyped.node.fs.rmdir2Fn)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdirSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdirSync(System.String)">
            <summary>
            Synchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdirSync(Retyped.node.Buffer)">
            <summary>
            Synchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdirSync(Retyped.node.url.URL)">
            <summary>
            Synchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.fs.PathLike,Bridge.Union{System.Double,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(System.String,System.Double,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(System.String,System.String,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(System.String,Retyped.Primitive.Null,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.Buffer,System.Double,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.Buffer,System.String,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.url.URL,System.Double,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.url.URL,System.String,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.fs.PathLike,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory with a mode of `0o777`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory with a mode of `0o777`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(System.String,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory with a mode of `0o777`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.Buffer,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory with a mode of `0o777`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir2(Retyped.node.url.URL,Retyped.node.fs.mkdir2Fn)">
            <summary>
            Asynchronous mkdir(2) - create a directory with a mode of `0o777`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(System.String)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.Buffer)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.url.URL)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.fs.PathLike,Bridge.Union{System.Double,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(System.String,System.Double)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(System.String,System.String)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdirSync(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Synchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Bridge.Union{Retyped.node.fs.readlink2Config,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.fs.readlink2Config,Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.BufferEncoding,Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.Primitive.Null,Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Bridge.Union{Retyped.node.Literals.Types.buffer,Retyped.node.fs.mkdtemp2Config},Retyped.node.fs.mkdtemp2Fn2)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.Literals.Types.buffer,Retyped.node.fs.mkdtemp2Fn2)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.fs.mkdtemp2Config,Retyped.node.fs.mkdtemp2Fn2)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Bridge.Union{Retyped.node.fs.readlink2Config3,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.mkdtemp2Fn3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.fs.readlink2Config3,Retyped.node.fs.mkdtemp2Fn3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,System.String,Retyped.node.fs.mkdtemp2Fn3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.mkdtemp2Fn3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.Primitive.Null,Retyped.node.fs.mkdtemp2Fn3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp2(System.String,Retyped.node.fs.mkdtemp2Fn)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Bridge.Union{Retyped.node.fs.readlinkSyncConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.node.fs.readlinkSyncConfig)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Bridge.Union{Retyped.node.fs.readlinkSyncConfig2,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtempSync(System.String,System.String)">
            <summary>
            Synchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readdir2Config,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdir2Config,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.fs.readdir2Config,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.BufferEncoding,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.fs.readdir2Config,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.BufferEncoding,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.fs.readdir2Config,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.BufferEncoding,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer},Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer,Retyped.node.fs.readdir2Fn2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config3,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config3,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,System.String,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,System.String,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.fs.readlink2Config3,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,System.String,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readdir2Fn3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.fs.PathLike,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(System.String,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.Buffer,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir2(Retyped.node.url.URL,Retyped.node.fs.readdir2Fn)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readdirSyncConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdirSyncConfig)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.node.fs.readdirSyncConfig)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.node.fs.readdirSyncConfig)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.node.fs.readdirSyncConfig)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink2Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.node.fs.readlink2Config2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlinkSyncConfig2,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(System.String,System.String)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,Retyped.node.fs.readlinkSyncConfig2)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdirSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.close2(System.Double,Retyped.node.fs.close2Fn)">
            <summary>
            Asynchronous close(2) - close a file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.closeSync(System.Double)">
            <summary>
            Synchronous close(2) - close a file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Bridge.Union{System.String,System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.String,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.String,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.String,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.Double,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.Double,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.Double,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.String,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.String,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.String,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.Double,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.Double,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.Double,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.String,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.String,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.String,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.String,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.Double,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.Double,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.Double,Retyped.Primitive.Null,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(System.String,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.Buffer,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.String,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open2(Retyped.node.url.URL,System.Double,Retyped.node.fs.open2Fn)">
            <summary>
            Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Bridge.Union{System.String,System.Double,Retyped.Primitive.Null})">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.String,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.String,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.Double,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.Double,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(System.String,System.Double,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.Double,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.Buffer,System.Double,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.Double,System.String)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.openSync(Retyped.node.url.URL,System.Double,Retyped.Primitive.Null)">
            <summary>
            Synchronous open(2) - open and possibly create a file, returning a file descriptor..
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date},Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.String,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.String,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.String,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.Double,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.Double,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,System.Double,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,Retyped.es5.Date,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,Retyped.es5.Date,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(System.String,Retyped.es5.Date,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.String,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.String,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.String,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.Double,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.Double,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,System.Double,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,Retyped.es5.Date,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,Retyped.es5.Date,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.Buffer,Retyped.es5.Date,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.String,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.String,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.String,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.Double,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.Double,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,System.Double,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,Retyped.es5.Date,System.String,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,Retyped.es5.Date,System.Double,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes2(Retyped.node.url.URL,Retyped.es5.Date,Retyped.es5.Date,Retyped.node.fs.utimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date})">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.String,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.String,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.String,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.Double,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.Double,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,System.Double,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,Retyped.es5.Date,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,Retyped.es5.Date,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(System.String,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.String,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.Double,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,System.Double,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,Retyped.es5.Date,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,Retyped.es5.Date,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.Buffer,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.String,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.Double,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,System.Double,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,Retyped.es5.Date,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,Retyped.es5.Date,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimesSync(Retyped.node.url.URL,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date},Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.String,System.String,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.String,System.Double,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.String,Retyped.es5.Date,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.Double,System.String,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.Double,System.Double,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,System.Double,Retyped.es5.Date,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,Retyped.es5.Date,System.String,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,Retyped.es5.Date,System.Double,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes2(System.Double,Retyped.es5.Date,Retyped.es5.Date,Retyped.node.fs.futimes2Fn)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date})">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.String,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.String,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.String,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.Double,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.Double,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,System.Double,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,Retyped.es5.Date,System.String)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,Retyped.es5.Date,System.Double)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimesSync(System.Double,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Synchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.fsync2(System.Double,Retyped.node.fs.fsync2Fn)">
            <summary>
            Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.fsyncSync(System.Double)">
            <summary>
            Synchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,System.Double,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,System.Double,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Undefined,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Null,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,System.Double,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,System.Double,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Null,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,System.Double,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,System.Double,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Undefined,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Null,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,System.Double,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.Primitive.Null,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.write2``1(System.Double,``0,Retyped.node.fs.write2Fn{``0})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Bridge.Union{System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,System.Double,System.String,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,System.Double,Retyped.Primitive.Null,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Undefined,System.String,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Undefined,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Undefined,Retyped.Primitive.Null,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Null,System.String,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Null,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Null,Retyped.Primitive.Null,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Bridge.Union{System.Double,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,System.Double,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.Primitive.Null,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write2(System.Double,System.Object,Retyped.node.fs.write2Fn2)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Bridge.Union{Retyped.node.Buffer,Retyped.es5.Uint8Array})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.node.Buffer)">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.es5.Uint8Array)">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Bridge.Union{Retyped.node.Buffer,Retyped.es5.Uint8Array},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.node.Buffer,System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.es5.Uint8Array,System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Bridge.Union{Retyped.node.Buffer,Retyped.es5.Uint8Array},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.node.Buffer,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.es5.Uint8Array,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Bridge.Union{Retyped.node.Buffer,Retyped.es5.Uint8Array},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.node.Buffer,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,Retyped.es5.Uint8Array,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,System.Object)">
            <summary>
            Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,System.Object,System.Nullable{System.Double})">
            <summary>
            Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.writeSync(System.Double,System.Object,System.Nullable{System.Double},System.String)">
            <summary>
            Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.read2``1(System.Double,``0,System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Asynchronously reads data from the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.read2``1(System.Double,``0,System.Double,System.Double,System.Nullable{System.Double},Retyped.node.fs.read2Fn{``0})">
            <summary>
            Asynchronously reads data from the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.readSync(System.Double,Bridge.Union{Retyped.node.Buffer,Retyped.es5.Uint8Array},System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.readSync(System.Double,Retyped.node.Buffer,System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.readSync(System.Double,Retyped.es5.Uint8Array,System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile2Config,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.node.fs.readFile2Config,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile2Config2,System.String},Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.node.fs.readFile2Config2,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,System.String,Retyped.node.fs.readFile2Fn2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile2Config3,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.node.fs.readFile2Config3,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,System.String,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.Primitive.Undefined,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.Primitive.Null,Retyped.node.fs.readFile2Fn3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.fs.PathLike,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.String,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.Buffer,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(Retyped.node.url.URL,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile2(System.Double,Retyped.node.fs.readFile2Fn)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double})">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike,Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String,Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer,Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL,Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double,Retyped.node.fs.readFileSyncConfig)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`.</param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile2Config2,System.String})">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike,Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike,System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String,Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String,System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer,Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL,Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double,Retyped.node.fs.readFile2Config2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double,System.String)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFileSyncConfig2,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike,Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.fs.PathLike,Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String,Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.String,Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer,Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL,Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double,Retyped.node.fs.readFileSyncConfig2)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFileSync(System.Double,Retyped.Primitive.Null)">
            <summary>
            Synchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.writeFile2Config,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.fs.PathLike,System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.String,System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.String,System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.String,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.String,System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.Buffer,System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.Buffer,System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.Buffer,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.url.URL,System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.url.URL,System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.url.URL,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.Double,System.Object,Retyped.node.fs.writeFile2Config,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.Double,System.Object,System.String,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.Double,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.Double,System.Object,Retyped.Primitive.Null,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.String,System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.Buffer,System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(Retyped.node.url.URL,System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile2(System.Double,System.Object,Retyped.node.fs.writeFile2Fn)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.fs.PathLike,System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.String,System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.Buffer,System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.url.URL,System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.Double,System.Object)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.writeFileSyncConfig,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.fs.PathLike,System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.String,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.String,System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.String,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.Buffer,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.Buffer,System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.url.URL,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.url.URL,System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.Double,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.Double,System.Object,System.String)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFileSync(System.Double,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.appendFile2Config,System.String,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.fs.PathLike,System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.String,System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.String,System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.String,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.String,System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.Buffer,System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.Buffer,System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.Buffer,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.url.URL,System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.url.URL,System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.url.URL,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.Double,System.Object,Retyped.node.fs.appendFile2Config,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.Double,System.Object,System.String,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.Double,System.Object,Retyped.Primitive.Undefined,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.Double,System.Object,Retyped.Primitive.Null,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.String,System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.Buffer,System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(Retyped.node.url.URL,System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile2(System.Double,System.Object,Retyped.node.fs.appendFile2Fn)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.fs.PathLike,System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.String,System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.Buffer,System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.url.URL,System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.Double,System.Object)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.writeFileSyncConfig,System.String,Retyped.Primitive.Null})">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.fs.PathLike,System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.String,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.String,System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.String,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.Buffer,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.Buffer,System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.url.URL,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.url.URL,System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.Double,System.Object,Retyped.node.fs.writeFileSyncConfig)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.Double,System.Object,System.String)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFileSync(System.Double,System.Object,Retyped.Primitive.Null)">
            <summary>
            Synchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchFileConfig,Retyped.Primitive.Undefined},Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchFileConfig,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(System.String,Retyped.node.fs.watchFileConfig,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.Buffer,Retyped.node.fs.watchFileConfig,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.url.URL,Retyped.node.fs.watchFileConfig,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.fs.PathLike,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watchFile(System.String,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.Buffer,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watchFile(Retyped.node.url.URL,Retyped.node.fs.watchFileFn)">
            <summary>
            Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.fs.PathLike)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(System.String)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.Buffer)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.url.URL)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.fs.PathLike,Retyped.node.fs.unwatchFileFn)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.unwatchFileFn)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(System.String,Retyped.node.fs.unwatchFileFn)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.Buffer,Retyped.node.fs.unwatchFileFn)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.unwatchFile(Retyped.node.url.URL,Retyped.node.fs.unwatchFileFn)">
            <summary>
            Stop watching for changes on `filename`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null})">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.Primitive.Undefined)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.Primitive.Null)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.Primitive.Undefined)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.Primitive.Undefined)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig,Retyped.node.BufferEncoding,Retyped.Primitive.Undefined,Retyped.Primitive.Null},Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.BufferEncoding,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.Primitive.Null,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.BufferEncoding,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.BufferEncoding,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.watchFn)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig2,Retyped.node.Literals.Types.buffer},Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig2,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig2,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.Literals.Types.buffer,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig2,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig2,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer,Retyped.node.fs.watchFn2)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig3,System.String,Retyped.Primitive.Null})">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,System.String)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,System.String)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,System.String)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.watchConfig3,System.String,Retyped.Primitive.Null},Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchConfig3,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchConfig3,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,System.String,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.Primitive.Null,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchConfig3,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,System.String,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.Primitive.Null,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchConfig3,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,System.String,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.Primitive.Null,Retyped.node.fs.watchFn3)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            If `persistent` is not supplied, the default of `true` is used.
            If `recursive` is not supplied, the default of `false` is used.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.fs.PathLike,Retyped.node.fs.watchFn4)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.watchFn4)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(System.String,Retyped.node.fs.watchFn4)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.Buffer,Retyped.node.fs.watchFn4)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.watch(Retyped.node.url.URL,Retyped.node.fs.watchFn4)">
            <summary>
            Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.
            </summary>
            <param name = "filename">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists2(Retyped.node.fs.PathLike,Retyped.node.fs.exists2Fn)">
            <summary>
            Asynchronously tests whether or not the given path exists by checking with the file system.
            @deprecated
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.exists2Fn)">
            <summary>
            Asynchronously tests whether or not the given path exists by checking with the file system.
            @deprecated
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists2(System.String,Retyped.node.fs.exists2Fn)">
            <summary>
            Asynchronously tests whether or not the given path exists by checking with the file system.
            @deprecated
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists2(Retyped.node.Buffer,Retyped.node.fs.exists2Fn)">
            <summary>
            Asynchronously tests whether or not the given path exists by checking with the file system.
            @deprecated
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists2(Retyped.node.url.URL,Retyped.node.fs.exists2Fn)">
            <summary>
            Asynchronously tests whether or not the given path exists by checking with the file system.
            @deprecated
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.existsSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronously tests whether or not the given path exists by checking with the file system.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.existsSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously tests whether or not the given path exists by checking with the file system.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.existsSync(System.String)">
            <summary>
            Synchronously tests whether or not the given path exists by checking with the file system.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.existsSync(Retyped.node.Buffer)">
            <summary>
            Synchronously tests whether or not the given path exists by checking with the file system.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.existsSync(Retyped.node.url.URL)">
            <summary>
            Synchronously tests whether or not the given path exists by checking with the file system.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.fs.PathLike,Bridge.Union{System.Double,Retyped.Primitive.Undefined},Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Undefined,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(System.String,System.Double,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(System.String,Retyped.Primitive.Undefined,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.Buffer,System.Double,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.Buffer,Retyped.Primitive.Undefined,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.url.URL,System.Double,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.url.URL,Retyped.Primitive.Undefined,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.fs.PathLike,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(System.String,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.Buffer,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access2(Retyped.node.url.URL,Retyped.node.fs.access2Fn)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.fs.PathLike)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(System.String)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.Buffer)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.url.URL)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.fs.PathLike,System.Double)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(System.String,System.Double)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.accessSync(Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.fs.PathLike)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(System.String)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.Buffer)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.url.URL)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.fs.PathLike,Bridge.Union{System.String,Retyped.node.fs.createReadStreamConfig})">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.createReadStreamConfig)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(System.String,System.String)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(System.String,Retyped.node.fs.createReadStreamConfig)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.Buffer,System.String)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.Buffer,Retyped.node.fs.createReadStreamConfig)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.url.URL,System.String)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createReadStream(Retyped.node.url.URL,Retyped.node.fs.createReadStreamConfig)">
            <summary>
            Returns a new `ReadStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.fs.PathLike)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(System.String)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.Buffer)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.url.URL)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.fs.PathLike,Bridge.Union{System.String,Retyped.node.fs.createWriteStreamConfig})">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.createWriteStreamConfig)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(System.String,System.String)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(System.String,Retyped.node.fs.createWriteStreamConfig)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.Buffer,System.String)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.Buffer,Retyped.node.fs.createWriteStreamConfig)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.url.URL,System.String)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.createWriteStream(Retyped.node.url.URL,Retyped.node.fs.createWriteStreamConfig)">
            <summary>
            Returns a new `WriteStream` object.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.fdatasync2(System.Double,Retyped.node.fs.fdatasync2Fn)">
            <summary>
            Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.fdatasyncSync(System.Double)">
            <summary>
            Synchronous fdatasync(2) - synchronize a file's in-core state with storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,System.String,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Retyped.node.Buffer,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Retyped.node.url.URL,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,System.String,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Retyped.node.Buffer,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Retyped.node.url.URL,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,System.String,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Retyped.node.Buffer,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Retyped.node.url.URL,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,System.String,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Retyped.node.Buffer,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(System.String,Retyped.node.url.URL,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,System.String,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Retyped.node.Buffer,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.Buffer,Retyped.node.url.URL,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,System.String,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Retyped.node.Buffer,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile2(Retyped.node.url.URL,Retyped.node.url.URL,System.Double,Retyped.node.fs.copyFile2Fn)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,System.String)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Retyped.node.Buffer)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Retyped.node.url.URL)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,System.String)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,System.String)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,System.String,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(System.String,Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.Buffer,Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Retyped.node.Buffer,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFileSync(Retyped.node.url.URL,Retyped.node.url.URL,System.Double)">
            <summary>
            Synchronously copies src to dest. By default, dest is overwritten if it already exists.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "dest">A path to the destination file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.FSWatcher.addListener(System.String,Retyped.node.fs.FSWatcher.addListenerFn)">
            <summary>
            events.EventEmitter
            1. change
            2. error
            </summary>
        </member>
        <member name="M:Retyped.node.fs.FSWatcher.addListener(Retyped.node.Literals.Types.change,Retyped.node.fs.FSWatcher.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. change
            2. error
            </summary>
        </member>
        <member name="M:Retyped.node.fs.FSWatcher.addListener(Retyped.node.Literals.Types.error,Retyped.node.fs.FSWatcher.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. change
            2. error
            </summary>
        </member>
        <member name="M:Retyped.node.fs.ReadStream.addListener(System.String,Retyped.node.fs.ReadStream.addListenerFn)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.ReadStream.addListener(Retyped.node.Literals.Types.open,Retyped.node.fs.ReadStream.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.ReadStream.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.WriteStream.addListener(System.String,Retyped.node.fs.WriteStream.addListenerFn)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.WriteStream.addListener(Retyped.node.Literals.Types.open,Retyped.node.fs.WriteStream.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.WriteStream.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            events.EventEmitter
            1. open
            2. close
            </summary>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(System.String,Retyped.node.Buffer)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(System.String,Retyped.node.url.URL)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.rename.__promisify__(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Asynchronous rename(2) - Change the name or location of a file or directory.
            </summary>
            <param name = "oldPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "newPath">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(System.String)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.fs.PathLike,System.Nullable{System.Double})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Nullable{System.Double})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(System.String,System.Nullable{System.Double})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.Buffer,System.Nullable{System.Double})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.truncate.__promisify__(Retyped.node.url.URL,System.Nullable{System.Double})">
            <summary>
            Asynchronous truncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate.__promisify__(System.Double)">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.ftruncate.__promisify__(System.Double,System.Nullable{System.Double})">
            <summary>
            Asynchronous ftruncate(2) - Truncate a file to a specified length.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "len">If not specified, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.chown.__promisify__(Retyped.node.fs.PathLike,System.Double,System.Double)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown.__promisify__(System.String,System.Double,System.Double)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown.__promisify__(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chown.__promisify__(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Asynchronous chown(2) - Change ownership of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.fchown.__promisify__(System.Double,System.Double,System.Double)">
            <summary>
            Asynchronous fchown(2) - Change ownership of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown.__promisify__(Retyped.node.fs.PathLike,System.Double,System.Double)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown.__promisify__(System.String,System.Double,System.Double)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown.__promisify__(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lchown.__promisify__(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(System.String,System.Double)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.chmod.__promisify__(Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronous chmod(2) - Change permissions of a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod.__promisify__(System.Double,Bridge.Union{System.String,System.Double})">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod.__promisify__(System.Double,System.String)">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.fchmod.__promisify__(System.Double,System.Double)">
            <summary>
            Asynchronous fchmod(2) - Change permissions of a file.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(System.String,System.Double)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.lchmod.__promisify__(Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer.</param>
        </member>
        <member name="M:Retyped.node.fs.stat.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat.__promisify__(System.String)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.stat.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous stat(2) - Get file status.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.fstat.__promisify__(System.Double)">
            <summary>
            Asynchronous fstat(2) - Get file status.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat.__promisify__(System.String)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.lstat.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(System.String,System.String)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(System.String,Retyped.node.Buffer)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(System.String,Retyped.node.url.URL)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.link.link2(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.
            </summary>
            <param name = "existingPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "newPath">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Retyped.node.Buffer)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Retyped.node.url.URL)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,System.String,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(System.String,Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.Buffer,Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.symlink.__promisify__(Retyped.node.url.URL,Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous symlink(2) - Create a new symbolic link to an existing file.
            </summary>
            <param name = "target">A path to an existing file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "path">A path to the new symlink. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "type">
            May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).
            When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink.__promisify__Config,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink.__promisify__Config)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.node.fs.readlink.__promisify__Config)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readlink.__promisify__Config)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readlink.__promisify__Config)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink.__promisify__Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink.__promisify__Config2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.node.fs.readlink.__promisify__Config2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readlink.__promisify__Config2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readlink.__promisify__Config2)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readlink.__promisify__Config3,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readlink.__promisify__Config3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,Retyped.node.fs.readlink.__promisify__Config3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readlink.__promisify__Config3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readlink.__promisify__Config3)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readlink.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous readlink(2) - read value of a symbolic link.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.realpath.__promisify__Config,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.realpath.__promisify__Config)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.node.fs.realpath.__promisify__Config)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.node.fs.realpath.__promisify__Config)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.node.fs.realpath.__promisify__Config)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.realpath.__promisify__Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.realpath.__promisify__Config2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.node.fs.realpath.__promisify__Config2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.node.fs.realpath.__promisify__Config2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.node.fs.realpath.__promisify__Config2)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.realpath.__promisify__Config3,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.realpath.__promisify__Config3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,Retyped.node.fs.realpath.__promisify__Config3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,Retyped.node.fs.realpath.__promisify__Config3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,Retyped.node.fs.realpath.__promisify__Config3)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.realpath.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous realpath(3) - return the canonicalized absolute pathname.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink.__promisify__(System.String)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.unlink.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous unlink(2) - delete a name and possibly the file it refers to.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir.__promisify__(System.String)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.rmdir.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous rmdir(2) - delete a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(System.String)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.Double,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(System.String,System.Double)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdir.__promisify__(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Asynchronous mkdir(2) - create a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Bridge.Union{Retyped.node.fs.mkdtemp.__promisify__Config,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.node.fs.mkdtemp.__promisify__Config)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Bridge.Union{Retyped.node.fs.mkdtemp.__promisify__Config2,Retyped.node.Literals.Types.buffer})">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.node.fs.mkdtemp.__promisify__Config2)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Bridge.Union{Retyped.node.fs.mkdtemp.__promisify__Config3,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,Retyped.node.fs.mkdtemp.__promisify__Config3)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.mkdtemp.__promisify__(System.String,System.String)">
            <summary>
            Asynchronously creates a unique temporary directory.
            Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
            </summary>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readdir.__promisify__Config,Retyped.node.BufferEncoding,Retyped.Primitive.Null})">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdir.__promisify__Config)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.node.fs.readdir.__promisify__Config)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readdir.__promisify__Config)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readdir.__promisify__Config)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.node.BufferEncoding)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.Literals.Types.buffer,Retyped.node.fs.readdir.__promisify__Config2})">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdir.__promisify__Config2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.node.fs.readdir.__promisify__Config2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readdir.__promisify__Config2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.node.Literals.Types.buffer)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readdir.__promisify__Config2)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{Retyped.node.fs.readdir.__promisify__Config3,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readdir.__promisify__Config3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,Retyped.node.fs.readdir.__promisify__Config3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readdir.__promisify__Config3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readdir.__promisify__Config3)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.readdir.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous readdir(3) - read a directory.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "options">The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.</param>
        </member>
        <member name="M:Retyped.node.fs.close.__promisify__(System.Double)">
            <summary>
            Asynchronous close(2) - close a file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double})">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double},Bridge.Union{System.String,System.Double,Retyped.Primitive.Null})">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.String,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.String,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.Double,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.Double,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(System.String,System.Double,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.Double,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.Buffer,System.Double,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.Double,System.String)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.open.__promisify__(Retyped.node.url.URL,System.Double,Retyped.Primitive.Null)">
            <summary>
            Asynchronous open(2) - open and possibly create a file.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "mode">A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.fs.PathLike,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date})">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.String,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.String,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.String,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.Double,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.Double,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,System.Double,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,Retyped.es5.Date,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,Retyped.es5.Date,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(System.String,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.String,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.String,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.Double,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.Double,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,System.Double,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,Retyped.es5.Date,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,Retyped.es5.Date,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.Buffer,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.String,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.String,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.Double,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.Double,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,System.Double,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,Retyped.es5.Date,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,Retyped.es5.Date,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.utimes.__promisify__(Retyped.node.url.URL,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied path.
            </summary>
            <param name = "path">A path to a file. If a URL is provided, it must use the `file:` protocol.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,Bridge.Union{System.String,System.Double,Retyped.es5.Date},Bridge.Union{System.String,System.Double,Retyped.es5.Date})">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.String,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.String,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.String,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.Double,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.Double,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,System.Double,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,Retyped.es5.Date,System.String)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,Retyped.es5.Date,System.Double)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.futimes.__promisify__(System.Double,Retyped.es5.Date,Retyped.es5.Date)">
            <summary>
            Asynchronously change file timestamps of the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "atime">The last access time. If a string is provided, it will be coerced to number.</param>
            <param name = "mtime">The last modified time. If a string is provided, it will be coerced to number.</param>
        </member>
        <member name="M:Retyped.node.fs.fsync.__promisify__(System.Double)">
            <summary>
            Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__``1(System.Double)">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__``1(System.Double,``0)">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__``1(System.Double,``0,System.Double)">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__``1(System.Double,``0,System.Double,System.Double)">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__``1(System.Double,``0,System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "offset">The part of the buffer to be written. If not supplied, defaults to `0`.</param>
            <param name = "length">The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__(System.Double,System.Object)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__(System.Double,System.Object,System.Nullable{System.Double})">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.write.__promisify__(System.Double,System.Object,System.Nullable{System.Double},System.String)">
            <summary>
            Asynchronously writes `string` to the file referenced by the supplied file descriptor.
            </summary>
            <param name = "fd">A file descriptor.</param>
            <param name = "string">A string to write. If something other than a string is supplied it will be coerced to a string.</param>
            <param name = "position">The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.</param>
            <param name = "encoding">The expected string encoding.</param>
        </member>
        <member name="M:Retyped.node.fs.read.__promisify__``1(System.Double,``0,System.Double,System.Double,System.Nullable{System.Double})">
            <param name = "fd">A file descriptor.</param>
            <param name = "buffer">The buffer that the data will be written to.</param>
            <param name = "offset">The offset in the buffer at which to start writing.</param>
            <param name = "length">The number of bytes to read.</param>
            <param name = "position">The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.</param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double})">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String,Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double,Retyped.node.fs.readFile.__promisify__Config)">
            <summary>
            Asynchronously reads the entire contents of a file.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </param>
            <param name = "options">
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile.__promisify__Config2,System.String})">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike,System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String,Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String,System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double,Retyped.node.fs.readFile.__promisify__Config2)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double,System.String)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},Bridge.Union{Retyped.node.fs.readFile.__promisify__Config3,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.fs.PathLike,Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String,Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.String,Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer,Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.Buffer,Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL,Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(Retyped.node.url.URL,Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double,Retyped.node.fs.readFile.__promisify__Config3)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.readFile.__promisify__(System.Double,Retyped.Primitive.Null)">
            <summary>
            Asynchronously reads the entire contents of a file.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "options">
            Either the encoding for the result, or an object that contains the encoding and an optional flag.
            If a flag is not provided, it defaults to `'r'`.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.fs.PathLike,System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.String,System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.Buffer,System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.url.URL,System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.Double,System.Object)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.writeFile.__promisify__Config,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.fs.PathLike,System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.String,System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.String,System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.String,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.Buffer,System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.Buffer,System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.url.URL,System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.url.URL,System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.Double,System.Object,Retyped.node.fs.writeFile.__promisify__Config)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.Double,System.Object,System.String)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.writeFile.__promisify__(System.Double,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously writes data to a file, replacing the file if it already exists.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'w'` is used.
            </summary>
            <param name = "path">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.fs.PathLike,System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.String,System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.Buffer,System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.url.URL,System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.Double,System.Object)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{Retyped.node.fs.PathLike,System.Double},System.Object,Bridge.Union{Retyped.node.fs.appendFile.__promisify__Config,System.String,Retyped.Primitive.Null})">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.fs.PathLike,System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.fs.PathLike,System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.fs.PathLike,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.String,System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.String,System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.String,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.Buffer,System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.Buffer,System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.Buffer,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.url.URL,System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.url.URL,System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(Retyped.node.url.URL,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.Double,System.Object,Retyped.node.fs.appendFile.__promisify__Config)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.Double,System.Object,System.String)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.appendFile.__promisify__(System.Double,System.Object,Retyped.Primitive.Null)">
            <summary>
            Asynchronously append data to a file, creating the file if it does not exist.
            If a file descriptor is provided, the underlying file will _not_ be closed automatically.
            If `mode` is not supplied, the default of `0o666` is used.
            If `mode` is a string, it is parsed as an octal integer.
            If `flag` is not supplied, the default of `'a'` is used.
            </summary>
            <param name = "file">
            A path to a file. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
            <param name = "data">The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.</param>
            <param name = "options">
            Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.
            If `encoding` is not supplied, the default of `'utf8'` is used.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists.__promisify__(Retyped.node.fs.PathLike)">
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists.__promisify__(System.String)">
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists.__promisify__(Retyped.node.Buffer)">
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.exists.__promisify__(Retyped.node.url.URL)">
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="F:Retyped.node.fs.constants.F_OK">
            <summary>
            Constant for fs.access(). File is visible to the calling process.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.R_OK">
            <summary>
            Constant for fs.access(). File can be read by the calling process.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.W_OK">
            <summary>
            Constant for fs.access(). File can be written by the calling process.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.X_OK">
            <summary>
            Constant for fs.access(). File can be executed by the calling process.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_RDONLY">
            <summary>
            Constant for fs.open(). Flag indicating to open a file for read-only access.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_WRONLY">
            <summary>
            Constant for fs.open(). Flag indicating to open a file for write-only access.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_RDWR">
            <summary>
            Constant for fs.open(). Flag indicating to open a file for read-write access.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_CREAT">
            <summary>
            Constant for fs.open(). Flag indicating to create the file if it does not already exist.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_EXCL">
            <summary>
            Constant for fs.open(). Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_NOCTTY">
            <summary>
            Constant for fs.open(). Flag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does not already have one).
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_TRUNC">
            <summary>
            Constant for fs.open(). Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_APPEND">
            <summary>
            Constant for fs.open(). Flag indicating that data will be appended to the end of the file.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_DIRECTORY">
            <summary>
            Constant for fs.open(). Flag indicating that the open should fail if the path is not a directory.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_NOATIME">
            <summary>
            Constant for fs.open(). Flag indicating reading accesses to the file system will no longer result in an update to the atime information associated with the file. This flag is available on Linux operating systems only.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_NOFOLLOW">
            <summary>
            Constant for fs.open(). Flag indicating that the open should fail if the path is a symbolic link.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_SYNC">
            <summary>
            Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_DSYNC">
            <summary>
            Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O with write operations waiting for data integrity.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_SYMLINK">
            <summary>
            Constant for fs.open(). Flag indicating to open the symbolic link itself rather than the resource it is pointing to.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_DIRECT">
            <summary>
            Constant for fs.open(). When set, an attempt will be made to minimize caching effects of file I/O.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.O_NONBLOCK">
            <summary>
            Constant for fs.open(). Flag indicating to open the file in nonblocking mode when possible.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFMT">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. Bit mask used to extract the file type code.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFREG">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a regular file.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFDIR">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a directory.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFCHR">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a character-oriented device file.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFBLK">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a block-oriented device file.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFIFO">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a FIFO/pipe.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFLNK">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a symbolic link.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IFSOCK">
            <summary>
            Constant for fs.Stats mode property for determining a file's type. File type constant for a socket.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IRWXU">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by owner.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IRUSR">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by owner.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IWUSR">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by owner.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IXUSR">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by owner.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IRWXG">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by group.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IRGRP">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by group.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IWGRP">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by group.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IXGRP">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by group.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IRWXO">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by others.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IROTH">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by others.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IWOTH">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by others.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.S_IXOTH">
            <summary>
            Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by others.
            </summary>
        </member>
        <member name="F:Retyped.node.fs.constants.COPYFILE_EXCL">
            <summary>
            Constant for fs.copyFile. Flag indicating the destination file should not be overwritten if it already exists.
            </summary>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.fs.PathLike)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(System.String)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.Buffer)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.url.URL)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.fs.PathLike,System.Double)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(System.String,System.Double)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.access.__promisify__(Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronously tests a user's permissions for the file specified by path.
            </summary>
            <param name = "path">
            A path to a file or directory. If a URL is provided, it must use the `file:` protocol.
            URL support is _experimental_.
            </param>
        </member>
        <member name="M:Retyped.node.fs.fdatasync.__promisify__(System.Double)">
            <summary>
            Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.
            </summary>
            <param name = "fd">A file descriptor.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,System.String)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Retyped.node.Buffer)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Retyped.node.url.URL)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,System.String)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Retyped.node.url.URL)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL})">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,System.String)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Retyped.node.Buffer)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Retyped.node.url.URL)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.fs.PathLike,Retyped.node.fs.PathLike,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.String,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,System.String,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(System.String,Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,System.String,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.Buffer,Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Bridge.Union{System.String,Retyped.node.Buffer,Retyped.node.url.URL},System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,System.String,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Retyped.node.Buffer,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="M:Retyped.node.fs.copyFile.__promisify__(Retyped.node.url.URL,Retyped.node.url.URL,System.Double)">
            <summary>
            Asynchronously copies src to dest. By default, dest is overwritten if it already exists.
            No arguments other than a possible exception are given to the callback function.
            Node.js makes no guarantees about the atomicity of the copy operation.
            If an error occurs after the destination file has been opened for writing, Node.js will attempt
            to remove the destination.
            </summary>
            <param name = "src">A path to the source file.</param>
            <param name = "flags">An optional integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.</param>
        </member>
        <member name="T:Retyped.node.fs.PathLike">
            <summary>
            Valid types for path values in "fs".
            </summary>
        </member>
        <member name="M:Retyped.node.path.normalize(System.String)">
            <summary>
            Normalize a string path, reducing '..' and '.' parts.
            When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
            </summary>
            <param name = "p">string path to normalize.</param>
        </member>
        <member name="M:Retyped.node.path.join(System.String[])">
            <summary>
            Join all arguments together and normalize the resulting path.
            Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.
            </summary>
            <param name = "paths">paths to join.</param>
        </member>
        <member name="M:Retyped.node.path.resolve(System.String[])">
            <summary>
            The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.
            Starting from leftmost {from} paramter, resolves {to} to an absolute path.
            If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an absolute path is found. If after using all {from} paths still no absolute path is found, the current working directory is used as well. The resulting path is normalized, and trailing slashes are removed unless the path gets resolved to the root directory.
            </summary>
            <param name = "pathSegments">string paths to join.  Non-string arguments are ignored.</param>
        </member>
        <member name="M:Retyped.node.path.isAbsolute(System.String)">
            <summary>
            Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.
            </summary>
            <param name = "path">path to test.</param>
        </member>
        <member name="M:Retyped.node.path.relative(System.String,System.String)">
            <summary>
            Solve the relative path from {from} to {to}.
            At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.
            </summary>
        </member>
        <member name="M:Retyped.node.path.dirname(System.String)">
            <summary>
            Return the directory name of a path. Similar to the Unix dirname command.
            </summary>
            <param name = "p">the path to evaluate.</param>
        </member>
        <member name="M:Retyped.node.path.basename(System.String)">
            <summary>
            Return the last portion of a path. Similar to the Unix basename command.
            Often used to extract the file name from a fully qualified path.
            </summary>
            <param name = "p">the path to evaluate.</param>
        </member>
        <member name="M:Retyped.node.path.basename(System.String,System.String)">
            <summary>
            Return the last portion of a path. Similar to the Unix basename command.
            Often used to extract the file name from a fully qualified path.
            </summary>
            <param name = "p">the path to evaluate.</param>
            <param name = "ext">optionally, an extension to remove from the result.</param>
        </member>
        <member name="M:Retyped.node.path.extname(System.String)">
            <summary>
            Return the extension of the path, from the last '.' to end of string in the last portion of the path.
            If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string
            </summary>
            <param name = "p">the path to evaluate.</param>
        </member>
        <member name="P:Retyped.node.path.sep">
            <summary>
            The platform-specific file separator. '\\' or '/'.
            </summary>
        </member>
        <member name="P:Retyped.node.path.delimiter">
            <summary>
            The platform-specific file delimiter. ';' or ':'.
            </summary>
        </member>
        <member name="M:Retyped.node.path.parse(System.String)">
            <summary>
            Returns an object from a path string - the opposite of format().
            </summary>
            <param name = "pathString">path to evaluate.</param>
        </member>
        <member name="M:Retyped.node.path.format(Retyped.node.path.FormatInputPathObject)">
            <summary>
            Returns a path string from an object - the opposite of parse().
            </summary>
        </member>
        <member name="T:Retyped.node.path.ParsedPath">
            <summary>
            A parsed path object generated by path.parse() or consumed by path.format().
            </summary>
        </member>
        <member name="P:Retyped.node.path.ParsedPath.root">
            <summary>
            The root of the path such as '/' or 'c:\'
            </summary>
        </member>
        <member name="P:Retyped.node.path.ParsedPath.dir">
            <summary>
            The full directory path such as '/home/user/dir' or 'c:\path\dir'
            </summary>
        </member>
        <member name="P:Retyped.node.path.ParsedPath.base">
            <summary>
            The file name including extension (if any) such as 'index.html'
            </summary>
        </member>
        <member name="P:Retyped.node.path.ParsedPath.ext">
            <summary>
            The file extension (if any) such as '.html'
            </summary>
        </member>
        <member name="P:Retyped.node.path.ParsedPath.name">
            <summary>
            The file name without extension (if any) such as 'index'
            </summary>
        </member>
        <member name="P:Retyped.node.path.FormatInputPathObject.root">
            <summary>
            The root of the path such as '/' or 'c:\'
            </summary>
        </member>
        <member name="P:Retyped.node.path.FormatInputPathObject.dir">
            <summary>
            The full directory path such as '/home/user/dir' or 'c:\path\dir'
            </summary>
        </member>
        <member name="P:Retyped.node.path.FormatInputPathObject.base">
            <summary>
            The file name including extension (if any) such as 'index.html'
            </summary>
        </member>
        <member name="P:Retyped.node.path.FormatInputPathObject.ext">
            <summary>
            The file extension (if any) such as '.html'
            </summary>
        </member>
        <member name="P:Retyped.node.path.FormatInputPathObject.name">
            <summary>
            The file name without extension (if any) such as 'index'
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.C">
            <summary>
            Country code.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.ST">
            <summary>
            Street.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.L">
            <summary>
            Locality.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.O">
            <summary>
            Organization.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.OU">
            <summary>
            Organizational unit.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.Certificate.CN">
            <summary>
            Common name.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.CipherNameAndProtocol.name">
            <summary>
            The cipher name.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.CipherNameAndProtocol.version">
            <summary>
            SSL/TLS protocol version.
            </summary>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.#ctor(Retyped.node.net.Socket)">
            <summary>
            Construct a new tls.TLSSocket object from an existing TCP socket.
            </summary>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.#ctor(Retyped.node.net.Socket,Retyped.node.tls.TLSSocket.Config)">
            <summary>
            Construct a new tls.TLSSocket object from an existing TCP socket.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.authorized">
            <summary>
            A boolean that is true if the peer certificate was signed by one of the specified CAs, otherwise false.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.authorizationError">
            <summary>
            The reason why the peer's certificate has not been verified.
            This property becomes available only when tlsSocket.authorized === false.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.encrypted">
            <summary>
            Static boolean value, always true.
            May be used to distinguish TLS sockets from regular ones.
            </summary>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getCipher">
            <summary>
            Returns an object representing the cipher name and the SSL/TLS protocol version of the current connection.
            </summary>
            <returns>
            Returns an object representing the cipher name
            and the SSL/TLS protocol version of the current connection.
            </returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getPeerCertificate(Retyped.node.Literals.Types.true)">
            <summary>
            Returns an object representing the peer's certificate.
            The returned object has some properties corresponding to the field of the certificate.
            If detailed argument is true the full chain with issuer property will be returned,
            if false only the top certificate without issuer property.
            If the peer does not provide a certificate, it returns null or an empty object.
            </summary>
            <param name = "detailed">If true; the full chain with issuer property will be returned.</param>
            <returns>An object representing the peer's certificate.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getPeerCertificate">
            <summary>
            Returns an object representing the peer's certificate.
            The returned object has some properties corresponding to the field of the certificate.
            If detailed argument is true the full chain with issuer property will be returned,
            if false only the top certificate without issuer property.
            If the peer does not provide a certificate, it returns null or an empty object.
            </summary>
            <returns>An object representing the peer's certificate.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getPeerCertificate(Retyped.node.Literals.Types.false)">
            <summary>
            Returns an object representing the peer's certificate.
            The returned object has some properties corresponding to the field of the certificate.
            If detailed argument is true the full chain with issuer property will be returned,
            if false only the top certificate without issuer property.
            If the peer does not provide a certificate, it returns null or an empty object.
            </summary>
            <param name = "detailed">If true; the full chain with issuer property will be returned.</param>
            <returns>An object representing the peer's certificate.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getPeerCertificate(System.Boolean)">
            <summary>
            Returns an object representing the peer's certificate.
            The returned object has some properties corresponding to the field of the certificate.
            If detailed argument is true the full chain with issuer property will be returned,
            if false only the top certificate without issuer property.
            If the peer does not provide a certificate, it returns null or an empty object.
            </summary>
            <param name = "detailed">If true; the full chain with issuer property will be returned.</param>
            <returns>An object representing the peer's certificate.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getProtocol">
            <summary>
            Returns a string containing the negotiated SSL/TLS protocol version of the current connection.
            The value `'unknown'` will be returned for connected sockets that have not completed the handshaking process.
            The value `null` will be returned for server sockets or disconnected client sockets.
            See https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html for more information.
            </summary>
            <returns>negotiated SSL/TLS protocol version of the current connection</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getSession">
            <summary>
            Could be used to speed up handshake establishment when reconnecting to the server.
            </summary>
            <returns>ASN.1 encoded TLS session or undefined if none was negotiated.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.getTLSTicket">
            <summary>
            NOTE: Works only with client TLS sockets.
            Useful only for debugging, for session reuse provide session option to tls.connect().
            </summary>
            <returns>TLS session ticket or undefined if none was negotiated.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.renegotiate(Retyped.node.tls.TLSSocket.renegotiateConfig,Retyped.node.tls.TLSSocket.renegotiateFn)">
            <summary>
            Initiate TLS renegotiation process.
            NOTE: Can be used to request peer's certificate after the secure connection has been established.
            ANOTHER NOTE: When running as the server, socket will be destroyed with an error after handshakeTimeout timeout.
            </summary>
            <param name = "options">
            The options may contain the following fields: rejectUnauthorized,
            requestCert (See tls.createServer() for details).
            </param>
            <param name = "callback">
            callback(err) will be executed with null as err, once the renegotiation
            is successfully completed.
            </param>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.setMaxSendFragment(System.Double)">
            <summary>
            Set maximum TLS fragment size (default and maximum value is: 16384, minimum is: 512).
            Smaller fragment size decreases buffering latency on the client: large fragments are buffered by
            the TLS layer until the entire fragment is received and its integrity is verified;
            large fragments can span multiple roundtrips, and their processing can be delayed due to packet
            loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead,
            which may decrease overall server throughput.
            </summary>
            <param name = "size">TLS fragment size (default and maximum value is: 16384, minimum is: 512).</param>
            <returns>Returns true on success, false otherwise.</returns>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.addListener(System.String,Retyped.node.tls.TLSSocket.addListenerFn)">
            <summary>
            events.EventEmitter
            1. OCSPResponse
            2. secureConnect
            </summary>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.addListener(Retyped.node.Literals.Types.OCSPResponse,Retyped.node.tls.TLSSocket.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. OCSPResponse
            2. secureConnect
            </summary>
        </member>
        <member name="M:Retyped.node.tls.TLSSocket.addListener(Retyped.node.Literals.Types.secureConnect,System.Action)">
            <summary>
            events.EventEmitter
            1. OCSPResponse
            2. secureConnect
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.secureContext">
            <summary>
            An optional TLS context object from tls.createSecureContext()
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.isServer">
            <summary>
            If true the TLS socket will be instantiated in server-mode.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.server">
            <summary>
            An optional net.Server instance.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.requestCert">
            <summary>
            If true the server will request a certificate from clients that
            connect and attempt to verify that certificate. Defaults to
            false.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.rejectUnauthorized">
            <summary>
            If true the server will reject any connection which is not
            authorized with the list of supplied CAs. This option only has an
            effect if requestCert is true. Defaults to false.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.NPNProtocols">
            <summary>
            An array of strings or a Buffer naming possible NPN protocols.
            (Protocols should be ordered by their priority.)
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.ALPNProtocols">
            <summary>
            An array of strings or a Buffer naming possible ALPN protocols.
            (Protocols should be ordered by their priority.) When the server
            receives both NPN and ALPN extensions from the client, ALPN takes
            precedence over NPN and the server does not send an NPN extension
            to the client.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Retyped.node.tls.TLSSocket.Config.SNICallback" -->
        <member name="P:Retyped.node.tls.TLSSocket.Config.session">
            <summary>
            An optional Buffer instance containing a TLS session.
            </summary>
        </member>
        <member name="P:Retyped.node.tls.TLSSocket.Config.requestOCSP">
            <summary>
            If true, specifies that the OCSP status request extension will be
            added to the client hello and an 'OCSPResponse' event will be
            emitted on the socket before establishing a secure communication
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(System.String,Retyped.node.tls.Server.addListenerFn)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(Retyped.node.Literals.Types.tlsClientError,Retyped.node.tls.Server.addListenerFn2)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(Retyped.node.Literals.Types.newSession,Retyped.node.tls.Server.addListenerFn3)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(Retyped.node.Literals.Types.OCSPRequest,Retyped.node.tls.Server.addListenerFn5)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(Retyped.node.Literals.Types.resumeSession,Retyped.node.tls.Server.addListenerFn6)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.tls.Server.addListener(Retyped.node.Literals.Types.secureConnection,Retyped.node.tls.Server.addListenerFn8)">
            <summary>
            events.EventEmitter
            1. tlsClientError
            2. newSession
            3. OCSPRequest
            4. resumeSession
            5. secureConnection
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(System.String,Retyped.node.stream.internal.Readable.addListenerFn)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(Retyped.node.Literals.Types.data,Retyped.node.stream.internal.Readable.addListenerFn2)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(Retyped.node.Literals.Types.end,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(Retyped.node.Literals.Types.readable,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Readable.addListener(Retyped.node.Literals.Types.error,Retyped.node.stream.internal.Readable.addListenerFn3)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. data
            3. end
            4. readable
            5. error
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(System.String,Retyped.node.stream.internal.Writable.addListenerFn)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.close,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.drain,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.error,Retyped.node.stream.internal.Writable.addListenerFn2)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.finish,System.Action)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.pipe,Retyped.node.stream.internal.Writable.addListenerFn3)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="M:Retyped.node.stream.internal.Writable.addListener(Retyped.node.Literals.Types.unpipe,Retyped.node.stream.internal.Writable.addListenerFn3)">
            <summary>
            Event emitter
            The defined events on documents including:
            1. close
            2. drain
            3. error
            4. finish
            5. pipe
            6. unpipe
            </summary>
        </member>
        <member name="T:Retyped.node.async_hooks">
            <summary>
            Async Hooks module: https://nodejs.org/api/async_hooks.html
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.executionAsyncId">
            <summary>
            Returns the asyncId of the current execution context.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.currentId">
            @deprecated - replaced by executionAsyncId()
        </member>
        <member name="M:Retyped.node.async_hooks.triggerAsyncId">
            <summary>
            Returns the ID of the resource responsible for calling the callback that is currently being executed.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.triggerId">
            @deprecated - replaced by triggerAsyncId()
        </member>
        <member name="M:Retyped.node.async_hooks.createHook(Retyped.node.async_hooks.HookCallbacks)">
            <summary>
            Registers functions to be called for different lifetime events of each async operation.
            </summary>
            <param name = "options">the callbacks to register</param>
            <returns>an AsyncHooks instance used for disabling and enabling hooks</returns>
        </member>
        <member name="T:Retyped.node.async_hooks.HookCallbacks.initFn">
            <summary>
            Called when a class is constructed that has the possibility to emit an asynchronous event.
            </summary>
            <param name = "asyncId">a unique ID for the async resource</param>
            <param name = "type">the type of the async resource</param>
            <param name = "triggerAsyncId">the unique ID of the async resource in whose execution context this async resource was created</param>
            <param name = "resource">reference to the resource representing the async operation, needs to be released during destroy</param>
        </member>
        <member name="T:Retyped.node.async_hooks.HookCallbacks.beforeFn">
            <summary>
            When an asynchronous operation is initiated or completes a callback is called to notify the user.
            The before callback is called just before said callback is executed.
            </summary>
            <param name = "asyncId">the unique identifier assigned to the resource about to execute the callback.</param>
        </member>
        <member name="T:Retyped.node.async_hooks.HookCallbacks.afterFn">
            <summary>
            Called immediately after the callback specified in before is completed.
            </summary>
            <param name = "asyncId">the unique identifier assigned to the resource which has executed the callback.</param>
        </member>
        <member name="T:Retyped.node.async_hooks.HookCallbacks.promiseResolveFn">
            <summary>
            Called when a promise has resolve() called. This may not be in the same execution id
            as the promise itself.
            </summary>
            <param name = "asyncId">the unique id for the promise that was resolve()d.</param>
        </member>
        <member name="T:Retyped.node.async_hooks.HookCallbacks.destroyFn">
            <summary>
            Called after the resource corresponding to asyncId is destroyed
            </summary>
            <param name = "asyncId">a unique ID for the async resource</param>
        </member>
        <member name="P:Retyped.node.async_hooks.HookCallbacks.init">
            <summary>
            Called when a class is constructed that has the possibility to emit an asynchronous event.
            </summary>
            <param name = "asyncId">a unique ID for the async resource</param>
            <param name = "type">the type of the async resource</param>
            <param name = "triggerAsyncId">the unique ID of the async resource in whose execution context this async resource was created</param>
            <param name = "resource">reference to the resource representing the async operation, needs to be released during destroy</param>
        </member>
        <member name="P:Retyped.node.async_hooks.HookCallbacks.before">
            <summary>
            When an asynchronous operation is initiated or completes a callback is called to notify the user.
            The before callback is called just before said callback is executed.
            </summary>
            <param name = "asyncId">the unique identifier assigned to the resource about to execute the callback.</param>
        </member>
        <member name="P:Retyped.node.async_hooks.HookCallbacks.after">
            <summary>
            Called immediately after the callback specified in before is completed.
            </summary>
            <param name = "asyncId">the unique identifier assigned to the resource which has executed the callback.</param>
        </member>
        <member name="P:Retyped.node.async_hooks.HookCallbacks.promiseResolve">
            <summary>
            Called when a promise has resolve() called. This may not be in the same execution id
            as the promise itself.
            </summary>
            <param name = "asyncId">the unique id for the promise that was resolve()d.</param>
        </member>
        <member name="P:Retyped.node.async_hooks.HookCallbacks.destroy">
            <summary>
            Called after the resource corresponding to asyncId is destroyed
            </summary>
            <param name = "asyncId">a unique ID for the async resource</param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncHook.enable">
            <summary>
            Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncHook.disable">
            <summary>
            Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.
            </summary>
        </member>
        <member name="P:Retyped.node.async_hooks.AsyncResourceOptions.triggerAsyncId">
            <summary>
            The ID of the execution context that created this async event.
            Default: `executionAsyncId()`
            </summary>
        </member>
        <member name="P:Retyped.node.async_hooks.AsyncResourceOptions.requireManualDestroy">
            <summary>
            Disables automatic `emitDestroy` when the object is garbage collected.
            This usually does not need to be set (even if `emitDestroy` is called
            manually), unless the resource's `asyncId` is retrieved and the
            sensitive API's `emitDestroy` is called with it.
            Default: `false`
            </summary>
        </member>
        <member name="T:Retyped.node.async_hooks.AsyncResource">
            <summary>
            The class AsyncResource was designed to be extended by the embedder's async resources.
            Using this users can easily trigger the lifetime events of their own resources.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.#ctor(System.String)">
            <summary>
            AsyncResource() is meant to be extended. Instantiating a
            new AsyncResource() also triggers init. If triggerAsyncId is omitted then
            async_hook.executionAsyncId() is used.
            AsyncResourceOptions object (since 9.3)
            </summary>
            <param name = "type">The type of async event.</param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.#ctor(System.String,Bridge.Union{System.Double,Retyped.node.async_hooks.AsyncResourceOptions})">
            <summary>
            AsyncResource() is meant to be extended. Instantiating a
            new AsyncResource() also triggers init. If triggerAsyncId is omitted then
            async_hook.executionAsyncId() is used.
            AsyncResourceOptions object (since 9.3)
            </summary>
            <param name = "type">The type of async event.</param>
            <param name = "triggerAsyncId">
            The ID of the execution context that created
            this async event (default: `executionAsyncId()`), or an
            </param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.#ctor(System.String,System.Double)">
            <summary>
            AsyncResource() is meant to be extended. Instantiating a
            new AsyncResource() also triggers init. If triggerAsyncId is omitted then
            async_hook.executionAsyncId() is used.
            AsyncResourceOptions object (since 9.3)
            </summary>
            <param name = "type">The type of async event.</param>
            <param name = "triggerAsyncId">
            The ID of the execution context that created
            this async event (default: `executionAsyncId()`), or an
            </param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.#ctor(System.String,Retyped.node.async_hooks.AsyncResourceOptions)">
            <summary>
            AsyncResource() is meant to be extended. Instantiating a
            new AsyncResource() also triggers init. If triggerAsyncId is omitted then
            async_hook.executionAsyncId() is used.
            AsyncResourceOptions object (since 9.3)
            </summary>
            <param name = "type">The type of async event.</param>
            <param name = "triggerAsyncId">
            The ID of the execution context that created
            this async event (default: `executionAsyncId()`), or an
            </param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.emitBefore">
            <summary>
            Call AsyncHooks before callbacks.
            @deprecated since 9.6 - Use asyncResource.runInAsyncScope() instead.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.emitAfter">
            <summary>
            Call AsyncHooks after callbacks.
            @deprecated since 9.6 - Use asyncResource.runInAsyncScope() instead.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.runInAsyncScope``2(Retyped.node.async_hooks.AsyncResource.runInAsyncScopeFn{``0,``1})">
            <summary>
            Call the provided function with the provided arguments in the
            execution context of the async resource. This will establish the
            context, trigger the AsyncHooks before callbacks, call the function,
            trigger the AsyncHooks after callbacks, and then restore the original
            execution context.
            </summary>
            <param name = "fn">
            The function to call in the execution context of this
            async resource.
            </param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.runInAsyncScope``2(Retyped.node.async_hooks.AsyncResource.runInAsyncScopeFn{``0,``1},``0,System.Object[])">
            <summary>
            Call the provided function with the provided arguments in the
            execution context of the async resource. This will establish the
            context, trigger the AsyncHooks before callbacks, call the function,
            trigger the AsyncHooks after callbacks, and then restore the original
            execution context.
            </summary>
            <param name = "fn">
            The function to call in the execution context of this
            async resource.
            </param>
            <param name = "thisArg">The receiver to be used for the function call.</param>
            <param name = "args">Optional arguments to pass to the function.</param>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.emitDestroy">
            <summary>
            Call AsyncHooks destroy callbacks.
            </summary>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.asyncId">
            <returns>the unique ID assigned to this AsyncResource instance.</returns>
        </member>
        <member name="M:Retyped.node.async_hooks.AsyncResource.triggerAsyncId">
            <returns>the trigger ID for this AsyncResource instance.</returns>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceEntry.duration">
            <summary>
            The total number of milliseconds elapsed for this entry.
            This value will not be meaningful for all Performance Entry types.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceEntry.name">
            <summary>
            The name of the performance entry.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceEntry.startTime">
            <summary>
            The high resolution millisecond timestamp marking the starting time of the Performance Entry.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceEntry.entryType">
            <summary>
            The type of the performance entry.
            Currently it may be one of: 'node', 'mark', 'measure', 'gc', or 'function'.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceEntry.kind">
            <summary>
            When performanceEntry.entryType is equal to 'gc', the performance.kind property identifies
            the type of garbage collection operation that occurred.
            The value may be one of perf_hooks.constants.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.bootstrapComplete">
            <summary>
            The high resolution millisecond timestamp at which the Node.js process completed bootstrap.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.clusterSetupEnd">
            <summary>
            The high resolution millisecond timestamp at which cluster processing ended.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.clusterSetupStart">
            <summary>
            The high resolution millisecond timestamp at which cluster processing started.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.loopExit">
            <summary>
            The high resolution millisecond timestamp at which the Node.js event loop exited.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.loopStart">
            <summary>
            The high resolution millisecond timestamp at which the Node.js event loop started.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.moduleLoadEnd">
            <summary>
            The high resolution millisecond timestamp at which main module load ended.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.moduleLoadStart">
            <summary>
            The high resolution millisecond timestamp at which main module load started.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.nodeStart">
            <summary>
            The high resolution millisecond timestamp at which the Node.js process was initialized.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.preloadModuleLoadEnd">
            <summary>
            The high resolution millisecond timestamp at which preload module load ended.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.preloadModuleLoadStart">
            <summary>
            The high resolution millisecond timestamp at which preload module load started.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.thirdPartyMainEnd">
            <summary>
            The high resolution millisecond timestamp at which third_party_main processing ended.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.thirdPartyMainStart">
            <summary>
            The high resolution millisecond timestamp at which third_party_main processing started.
            </summary>
        </member>
        <member name="P:Retyped.node.perf_hooks.PerformanceNodeTiming.v8Start">
            <summary>
            The high resolution millisecond timestamp at which the V8 platform was initialized.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearFunctions">
            <summary>
            If name is not provided, removes all PerformanceFunction objects from the Performance Timeline.
            If name is provided, removes entries with name.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearFunctions(System.String)">
            <summary>
            If name is not provided, removes all PerformanceFunction objects from the Performance Timeline.
            If name is provided, removes entries with name.
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearMarks">
            <summary>
            If name is not provided, removes all PerformanceMark objects from the Performance Timeline.
            If name is provided, removes only the named mark.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearMarks(System.String)">
            <summary>
            If name is not provided, removes all PerformanceMark objects from the Performance Timeline.
            If name is provided, removes only the named mark.
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearMeasures">
            <summary>
            If name is not provided, removes all PerformanceMeasure objects from the Performance Timeline.
            If name is provided, removes only objects whose performanceEntry.name matches name.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.clearMeasures(System.String)">
            <summary>
            If name is not provided, removes all PerformanceMeasure objects from the Performance Timeline.
            If name is provided, removes only objects whose performanceEntry.name matches name.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.getEntries">
            <summary>
            Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime.
            </summary>
            <returns>list of all PerformanceEntry objects</returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.getEntriesByName(System.String)">
            <summary>
            Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.
            </summary>
            <param name = "name"></param>
            <returns>list of all PerformanceEntry objects</returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.getEntriesByName(System.String,System.String)">
            <summary>
            Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
            <returns>list of all PerformanceEntry objects</returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.getEntriesByType(System.String)">
            <summary>
            Returns a list of all PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.entryType is equal to type.
            </summary>
            <param name = "type"></param>
            <returns>list of all PerformanceEntry objects</returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.mark">
            <summary>
            Creates a new PerformanceMark entry in the Performance Timeline.
            A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark',
            and whose performanceEntry.duration is always 0.
            Performance marks are used to mark specific significant moments in the Performance Timeline.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.mark(System.String)">
            <summary>
            Creates a new PerformanceMark entry in the Performance Timeline.
            A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark',
            and whose performanceEntry.duration is always 0.
            Performance marks are used to mark specific significant moments in the Performance Timeline.
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.measure(System.String,System.String,System.String)">
            <summary>
            Creates a new PerformanceMeasure entry in the Performance Timeline.
            A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',
            and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.
            The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify
            any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,
            then startMark is set to timeOrigin by default.
            The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp
            properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.
            </summary>
            <param name = "name"></param>
            <param name = "startMark"></param>
            <param name = "endMark"></param>
        </member>
        <member name="P:Retyped.node.perf_hooks.Performance.nodeTiming">
            <summary>
            An instance of the PerformanceNodeTiming class that provides performance metrics for specific Node.js operational milestones.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.now">
            <returns>the current high resolution millisecond timestamp</returns>
        </member>
        <member name="P:Retyped.node.perf_hooks.Performance.timeOrigin">
            <summary>
            The timeOrigin specifies the high resolution millisecond timestamp from which all performance metric durations are measured.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.Performance.timerify``1(``0)">
            <summary>
            Wraps a function within a new function that measures the running time of the wrapped function.
            A PerformanceObserver must be subscribed to the 'function' event type in order for the timing details to be accessed.
            </summary>
            <param name = "fn"></param>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserverEntryList.getEntries">
            <returns>a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime.</returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserverEntryList.getEntriesByName(System.String)">
            <returns>
            a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.
            </returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserverEntryList.getEntriesByName(System.String,System.String)">
            <returns>
            a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.
            </returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserverEntryList.getEntriesByType(System.String)">
            <returns>
            Returns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime
            whose performanceEntry.entryType is equal to type.
            </returns>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserver.disconnect">
            <summary>
            Disconnects the PerformanceObserver instance from all notifications.
            </summary>
        </member>
        <member name="M:Retyped.node.perf_hooks.PerformanceObserver.observe(Retyped.node.perf_hooks.PerformanceObserver.observeConfig)">
            <summary>
            Subscribes the PerformanceObserver instance to notifications of new PerformanceEntry instances identified by options.entryTypes.
            When options.buffered is false, the callback will be invoked once for every PerformanceEntry instance.
            Property buffered defaults to false.
            </summary>
            <param name = "options"></param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(System.String,System.String)">
            <summary>
            Allocates a new buffer containing the given {str}.
            </summary>
            <param name = "str">String to store in buffer.</param>
            <param name = "encoding">encoding to use, optional.  Default is 'utf8'</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(Retyped.es5.Uint8Array)">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(Retyped.es5.ArrayBuffer)">
            <summary>
            Produces a Buffer backed by the same allocated memory as
            the given {ArrayBuffer}.
            </summary>
            <param name = "arrayBuffer">The ArrayBuffer with which to share memory.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(System.Object[])">
            <summary>
            Allocates a new buffer containing the given {array} of octets.
            </summary>
            <param name = "array">The octets to store.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.New(Retyped.node.Buffer)">
            <summary>
            Copies the passed {buffer} data onto a new {Buffer} instance.
            </summary>
            <param name = "buffer">The buffer to copy.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(Retyped.es5.ArrayBuffer)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(Retyped.es5.ArrayBuffer,System.Double,System.Double)">
            <summary>
            When passed a reference to the .buffer property of a TypedArray instance,
            the newly created Buffer will share the same allocated memory as the TypedArray.
            The optional {byteOffset} and {length} arguments specify a memory range
            within the {arrayBuffer} that will be shared by the Buffer.
            </summary>
            <param name = "arrayBuffer">The .buffer property of a TypedArray or a new ArrayBuffer()</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(Bridge.Union{System.Object[],System.String,Retyped.node.Buffer,Retyped.es5.ArrayBuffer})">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(System.Object[])">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(Retyped.node.Buffer)">
            <summary>
            Creates a new Buffer using the passed {data}
            </summary>
            <param name = "data">data to create a new Buffer</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.from(System.String,System.String)">
            <summary>
            Creates a new Buffer containing the given JavaScript string {str}.
            If provided, the {encoding} parameter identifies the character encoding.
            If not provided, {encoding} defaults to 'utf8'.
            </summary>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.isBuffer(System.Object)">
            <summary>
            Returns true if {obj} is a Buffer
            </summary>
            <param name = "obj">object to test.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.isEncoding(System.String)">
            <summary>
            Returns true if {encoding} is a valid encoding argument.
            Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
            </summary>
            <param name = "encoding">string to test.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer})">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.node.Buffer)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.es5.DataView)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.es5.ArrayBuffer)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Bridge.Union{System.String,Retyped.node.Buffer,Retyped.es5.DataView,Retyped.es5.ArrayBuffer},System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(System.String,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.node.Buffer,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.es5.DataView,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.byteLength(Retyped.es5.ArrayBuffer,System.String)">
            <summary>
            Gives the actual byte length of a string. encoding defaults to 'utf8'.
            This is not the same as String.prototype.length since that returns the number of characters in a string.
            </summary>
            <param name = "string">string to test. (TypedArray is also allowed, but it is only available starting ES2017)</param>
            <param name = "encoding">encoding used to evaluate (defaults to 'utf8')</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.concat(Retyped.node.Buffer[])">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.concat(Retyped.node.Buffer[],System.Double)">
            <summary>
            Returns a buffer which is the result of concatenating all the buffers in the list together.
            If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
            If the list has exactly one item, then the first item of the list is returned.
            If the list has more than one item, then a new Buffer is created.
            </summary>
            <param name = "list">An array of Buffer objects to concatenate</param>
            <param name = "totalLength">
            Total length of the buffers when concatenated.
            If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.
            </param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.compare(Retyped.node.Buffer,Retyped.node.Buffer)">
            <summary>
            The same as buf1.compare(buf2).
            </summary>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double})">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,Retyped.node.Buffer)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,System.Double)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,Bridge.Union{System.String,Retyped.node.Buffer,System.Double},System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,System.String,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,Retyped.node.Buffer,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.alloc(System.Double,System.Double,System.String)">
            <summary>
            Allocates a new buffer of {size} octets.
            </summary>
            <param name = "size">count of octets to allocate.</param>
            <param name = "fill">
            if specified, buffer will be initialized by calling buf.fill(fill).
            If parameter is omitted, buffer will be filled with zeros.
            </param>
            <param name = "encoding">encoding used for call to buf.fill while initalizing</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.allocUnsafe(System.Double)">
            <summary>
            Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="M:Retyped.node.BufferTypeConfig.allocUnsafeSlow(System.Double)">
            <summary>
            Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents
            of the newly created Buffer are unknown and may contain sensitive data.
            </summary>
            <param name = "size">count of octets to allocate</param>
        </member>
        <member name="P:Retyped.node.BufferTypeConfig.poolSize">
            <summary>
            This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.open">
            <summary>
            Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started.
            If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.open(System.Double)">
            <summary>
            Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started.
            If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.
            </summary>
            <param name = "port">Port to listen on for inspector connections. Optional, defaults to what was specified on the CLI.</param>
        </member>
        <member name="M:Retyped.node.inspector.open(System.Double,System.String)">
            <summary>
            Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started.
            If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.
            </summary>
            <param name = "port">Port to listen on for inspector connections. Optional, defaults to what was specified on the CLI.</param>
            <param name = "host">Host to listen on for inspector connections. Optional, defaults to what was specified on the CLI.</param>
        </member>
        <member name="M:Retyped.node.inspector.open(System.Double,System.String,System.Boolean)">
            <summary>
            Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started.
            If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.
            </summary>
            <param name = "port">Port to listen on for inspector connections. Optional, defaults to what was specified on the CLI.</param>
            <param name = "host">Host to listen on for inspector connections. Optional, defaults to what was specified on the CLI.</param>
            <param name = "wait">Block until a client has connected. Optional, defaults to false.</param>
        </member>
        <member name="M:Retyped.node.inspector.close">
            <summary>
            Deactivate the inspector. Blocks until there are no active connections.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.url">
            <summary>
            Return the URL of the active inspector, or undefined if there is none.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Schema.Domain">
            <summary>
            Description of the protocol domain.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Schema.Domain.name">
            <summary>
            Domain name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Schema.Domain.version">
            <summary>
            Domain version.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Schema.GetDomainsReturnType.domains">
            <summary>
            List of supported domains.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.RemoteObject">
            <summary>
            Mirror object referencing original JavaScript object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.type">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.subtype">
            <summary>
            Object subtype hint. Specified for <code>object</code> type values only.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.className">
            <summary>
            Object class (constructor) name. Specified for <code>object</code> type values only.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.value">
            <summary>
            Remote object value in case of primitive values or JSON values (if it was requested).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.unserializableValue">
            <summary>
            Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.description">
            <summary>
            String representation of the object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.objectId">
            <summary>
            Unique object identifier (for non-primitive values).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.preview">
            <summary>
            Preview containing abbreviated property values. Specified for <code>object</code> type values only.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RemoteObject.customPreview">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.CustomPreview">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.ObjectPreview">
            <summary>
            Object containing abbreviated remote object value.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.type">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.subtype">
            <summary>
            Object subtype hint. Specified for <code>object</code> type values only.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.description">
            <summary>
            String representation of the object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.overflow">
            <summary>
            True iff some of the properties or entries of the original object did not fit.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.properties">
            <summary>
            List of the properties.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ObjectPreview.entries">
            <summary>
            List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.PropertyPreview">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyPreview.name">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyPreview.type">
            <summary>
            Object type. Accessor means that the property itself is an accessor property.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyPreview.value">
            <summary>
            User-friendly property value string.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyPreview.valuePreview">
            <summary>
            Nested value preview.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyPreview.subtype">
            <summary>
            Object subtype hint. Specified for <code>object</code> type values only.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.EntryPreview">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EntryPreview.key">
            <summary>
            Preview of the key. Specified for map-like collection entries.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EntryPreview.value">
            <summary>
            Preview of the value.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.PropertyDescriptor">
            <summary>
            Object property descriptor.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.name">
            <summary>
            Property name or symbol description.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.value">
            <summary>
            The value associated with the property.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.writable">
            <summary>
            True if the value associated with the property may be changed (data descriptors only).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.get">
            <summary>
            A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.set">
            <summary>
            A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.configurable">
            <summary>
            True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.enumerable">
            <summary>
            True if this property shows up during enumeration of the properties on the corresponding object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.wasThrown">
            <summary>
            True if the result was thrown during the evaluation.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.isOwn">
            <summary>
            True if the property is owned for the object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.PropertyDescriptor.symbol">
            <summary>
            Property symbol object, if the property is of the <code>symbol</code> type.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.InternalPropertyDescriptor">
            <summary>
            Object internal property descriptor. This property isn't normally visible in JavaScript code.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.InternalPropertyDescriptor.name">
            <summary>
            Conventional property name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.InternalPropertyDescriptor.value">
            <summary>
            The value associated with the property.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.CallArgument">
            <summary>
            Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallArgument.value">
            <summary>
            Primitive value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallArgument.unserializableValue">
            <summary>
            Primitive value which can not be JSON-stringified.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallArgument.objectId">
            <summary>
            Remote object handle.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.ExecutionContextDescription">
            <summary>
            Description of an isolated world.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextDescription.id">
            <summary>
            Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextDescription.origin">
            <summary>
            Execution context origin.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextDescription.name">
            <summary>
            Human readable name describing given context.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextDescription.auxData">
            <summary>
            Embedder-specific auxiliary data.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.ExceptionDetails">
            <summary>
            Detailed information about exception (or error) that was thrown during script compilation or execution.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.exceptionId">
            <summary>
            Exception id.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.text">
            <summary>
            Exception text, which should be used together with exception object when available.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.lineNumber">
            <summary>
            Line number of the exception location (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.columnNumber">
            <summary>
            Column number of the exception location (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.scriptId">
            <summary>
            Script ID of the exception location.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.url">
            <summary>
            URL of the exception location, to be used when the script was not reported.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.stackTrace">
            <summary>
            JavaScript stack trace if available.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.exception">
            <summary>
            Exception object if available.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionDetails.executionContextId">
            <summary>
            Identifier of the context where exception happened.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.CallFrame">
            <summary>
            Stack entry for runtime errors and assertions.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFrame.functionName">
            <summary>
            JavaScript function name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFrame.scriptId">
            <summary>
            JavaScript script id.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFrame.url">
            <summary>
            JavaScript script name or url.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFrame.lineNumber">
            <summary>
            JavaScript script line number (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFrame.columnNumber">
            <summary>
            JavaScript script column number (0-based).
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.StackTrace">
            <summary>
            Call frames for assertions or error messages.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.StackTrace.description">
            <summary>
            String label of this stack trace. For async traces this may be a name of the function that initiated the async call.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.StackTrace.callFrames">
            <summary>
            JavaScript function name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.StackTrace.parent">
            <summary>
            Asynchronous JavaScript stack trace that preceded this stack, if available.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.StackTrace.promiseCreationFrame">
            <summary>
            Creation frame of the Promise which produced the next synchronous trace when resolved, if available.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.expression">
            <summary>
            Expression to evaluate.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.objectGroup">
            <summary>
            Symbolic group name that can be used to release multiple objects.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.includeCommandLineAPI">
            <summary>
            Determines whether Command Line API should be available during the evaluation.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.silent">
            <summary>
            In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.contextId">
            <summary>
            Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.returnByValue">
            <summary>
            Whether the result is expected to be a JSON object that should be sent by value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the result.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.userGesture">
            <summary>
            Whether execution should be treated as initiated by user in the UI.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateParameterType.awaitPromise">
            <summary>
            Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.AwaitPromiseParameterType.promiseObjectId">
            <summary>
            Identifier of the promise.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.AwaitPromiseParameterType.returnByValue">
            <summary>
            Whether the result is expected to be a JSON object that should be sent by value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.AwaitPromiseParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.objectId">
            <summary>
            Identifier of the object to call function on.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.functionDeclaration">
            <summary>
            Declaration of the function to call.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.arguments">
            <summary>
            Call arguments. All call arguments must belong to the same JavaScript world as the target object.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.silent">
            <summary>
            In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.returnByValue">
            <summary>
            Whether the result is expected to be a JSON object which should be sent by value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the result.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.userGesture">
            <summary>
            Whether execution should be treated as initiated by user in the UI.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnParameterType.awaitPromise">
            <summary>
            Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesParameterType.objectId">
            <summary>
            Identifier of the object to return properties for.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesParameterType.ownProperties">
            <summary>
            If true, returns properties belonging only to the element itself, not to its prototype chain.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesParameterType.accessorPropertiesOnly">
            <summary>
            If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the results.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ReleaseObjectParameterType.objectId">
            <summary>
            Identifier of the object to release.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ReleaseObjectGroupParameterType.objectGroup">
            <summary>
            Symbolic object group name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptParameterType.expression">
            <summary>
            Expression to compile.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptParameterType.sourceURL">
            <summary>
            Source url to be set for the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptParameterType.persistScript">
            <summary>
            Specifies whether the compiled script should be persisted.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptParameterType.executionContextId">
            <summary>
            Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.scriptId">
            <summary>
            Id of the script to run.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.executionContextId">
            <summary>
            Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.objectGroup">
            <summary>
            Symbolic group name that can be used to release multiple objects.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.silent">
            <summary>
            In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.includeCommandLineAPI">
            <summary>
            Determines whether Command Line API should be available during the evaluation.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.returnByValue">
            <summary>
            Whether the result is expected to be a JSON object which should be sent by value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptParameterType.awaitPromise">
            <summary>
            Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateReturnType.result">
            <summary>
            Evaluation result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.EvaluateReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.AwaitPromiseReturnType.result">
            <summary>
            Promise result. Will contain rejected value if promise was rejected.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.AwaitPromiseReturnType.exceptionDetails">
            <summary>
            Exception details if stack strace is available.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnReturnType.result">
            <summary>
            Call result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CallFunctionOnReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesReturnType.result">
            <summary>
            Object properties.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesReturnType.internalProperties">
            <summary>
            Internal object properties (only of the element itself).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.GetPropertiesReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptReturnType.scriptId">
            <summary>
            Id of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.CompileScriptReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptReturnType.result">
            <summary>
            Run result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.RunScriptReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextCreatedEventDataType.context">
            <summary>
            A newly created execution context.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExecutionContextDestroyedEventDataType.executionContextId">
            <summary>
            Id of the destroyed context
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionThrownEventDataType.timestamp">
            <summary>
            Timestamp of the exception.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionRevokedEventDataType.reason">
            <summary>
            Reason describing why exception was revoked.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ExceptionRevokedEventDataType.exceptionId">
            <summary>
            The id of revoked exception, as reported in <code>exceptionUnhandled</code>.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.type">
            <summary>
            Type of the call.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.args">
            <summary>
            Call arguments.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.executionContextId">
            <summary>
            Identifier of the context where the call was made.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.timestamp">
            <summary>
            Call timestamp.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.stackTrace">
            <summary>
            Stack trace captured when the call was made.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Runtime.ConsoleAPICalledEventDataType.context">
            <summary>
            Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.
            @experimental
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.ScriptId">
            <summary>
            Unique script identifier.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.RemoteObjectId">
            <summary>
            Unique object identifier.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.UnserializableValue">
            <summary>
            Primitive value which cannot be JSON-stringified.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.ExecutionContextId">
            <summary>
            Id of an execution context.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Runtime.Timestamp">
            <summary>
            Number of milliseconds since epoch.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.Location">
            <summary>
            Location in the source code.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Location.scriptId">
            <summary>
            Script identifier as reported in the <code>Debugger.scriptParsed</code>.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Location.lineNumber">
            <summary>
            Line number in the script (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Location.columnNumber">
            <summary>
            Column number in the script (0-based).
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.ScriptPosition">
            <summary>
            Location in the source code.
            @experimental
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.CallFrame">
            <summary>
            JavaScript call frame. Array of call frames form the call stack.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.callFrameId">
            <summary>
            Call frame identifier. This identifier is only valid while the virtual machine is paused.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.functionName">
            <summary>
            Name of the JavaScript function called on this call frame.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.functionLocation">
            <summary>
            Location in the source code.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.location">
            <summary>
            Location in the source code.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.scopeChain">
            <summary>
            Scope chain for this call frame.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.this">
            <summary>
            <code>this</code> object for this call frame.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.CallFrame.returnValue">
            <summary>
            The value being returned, if the function is at return point.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.Scope">
            <summary>
            Scope description.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Scope.type">
            <summary>
            Scope type.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Scope.object">
            <summary>
            Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Scope.startLocation">
            <summary>
            Location in the source code where scope starts
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.Scope.endLocation">
            <summary>
            Location in the source code where scope ends
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.SearchMatch">
            <summary>
            Search match for resource.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchMatch.lineNumber">
            <summary>
            Line number in resource content.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchMatch.lineContent">
            <summary>
            Line with match content.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.BreakLocation">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.BreakLocation.scriptId">
            <summary>
            Script identifier as reported in the <code>Debugger.scriptParsed</code>.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.BreakLocation.lineNumber">
            <summary>
            Line number in the script (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.BreakLocation.columnNumber">
            <summary>
            Column number in the script (0-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointsActiveParameterType.active">
            <summary>
            New value for breakpoints active state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetSkipAllPausesParameterType.skip">
            <summary>
            New value for skip pauses state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType.lineNumber">
            <summary>
            Line number to set breakpoint at.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType.url">
            <summary>
            URL of the resources to set breakpoint on.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType.urlRegex">
            <summary>
            Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType.columnNumber">
            <summary>
            Offset in the line to set breakpoint at.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType.condition">
            <summary>
            Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointParameterType.location">
            <summary>
            Location to set breakpoint in.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointParameterType.condition">
            <summary>
            Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetPossibleBreakpointsParameterType.start">
            <summary>
            Start of range to search possible breakpoint locations in.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetPossibleBreakpointsParameterType.end">
            <summary>
            End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetPossibleBreakpointsParameterType.restrictToFunction">
            <summary>
            Only consider locations which are in the same (non-nested) function as start.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ContinueToLocationParameterType.location">
            <summary>
            Location to continue to.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ContinueToLocationParameterType.targetCallFrames">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchInContentParameterType.scriptId">
            <summary>
            Id of the script to search in.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchInContentParameterType.query">
            <summary>
            String to search for.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchInContentParameterType.caseSensitive">
            <summary>
            If true, search is case sensitive.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchInContentParameterType.isRegex">
            <summary>
            If true, treats string parameter as regex.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceParameterType.scriptId">
            <summary>
            Id of the script to edit.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceParameterType.scriptSource">
            <summary>
            New content of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceParameterType.dryRun">
            <summary>
            If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.RestartFrameParameterType.callFrameId">
            <summary>
            Call frame identifier to evaluate on.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetScriptSourceParameterType.scriptId">
            <summary>
            Id of the script to get source for.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetPauseOnExceptionsParameterType.state">
            <summary>
            Pause on exceptions mode.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.callFrameId">
            <summary>
            Call frame identifier to evaluate on.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.expression">
            <summary>
            Expression to evaluate.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.objectGroup">
            <summary>
            String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.includeCommandLineAPI">
            <summary>
            Specifies whether command line API should be available to the evaluated expression, defaults to false.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.silent">
            <summary>
            In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.returnByValue">
            <summary>
            Whether the result is expected to be a JSON object that should be sent by value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.generatePreview">
            <summary>
            Whether preview should be generated for the result.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType.throwOnSideEffect">
            <summary>
            Whether to throw an exception if side effect cannot be ruled out during evaluation.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetVariableValueParameterType.scopeNumber">
            <summary>
            0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetVariableValueParameterType.variableName">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetVariableValueParameterType.newValue">
            <summary>
            New variable value.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetVariableValueParameterType.callFrameId">
            <summary>
            Id of callframe that holds variable.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetAsyncCallStackDepthParameterType.maxDepth">
            <summary>
            Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBlackboxPatternsParameterType.patterns">
            <summary>
            Array of regexps that will be used to check script url for blackbox state.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBlackboxedRangesParameterType.scriptId">
            <summary>
            Id of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlReturnType.breakpointId">
            <summary>
            Id of the created breakpoint for further reference.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointByUrlReturnType.locations">
            <summary>
            List of the locations this breakpoint resolved into upon addition.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointReturnType.breakpointId">
            <summary>
            Id of the created breakpoint for further reference.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetBreakpointReturnType.actualLocation">
            <summary>
            Location this breakpoint resolved into.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetPossibleBreakpointsReturnType.locations">
            <summary>
            List of the possible breakpoint locations.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SearchInContentReturnType.result">
            <summary>
            List of search matches.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceReturnType.callFrames">
            <summary>
            New stack trace in case editing has happened while VM was stopped.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceReturnType.stackChanged">
            <summary>
            Whether current call stack  was modified after applying the changes.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceReturnType.asyncStackTrace">
            <summary>
            Async stack trace, if any.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.SetScriptSourceReturnType.exceptionDetails">
            <summary>
            Exception details if any.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.RestartFrameReturnType.callFrames">
            <summary>
            New stack trace.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.RestartFrameReturnType.asyncStackTrace">
            <summary>
            Async stack trace, if any.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.GetScriptSourceReturnType.scriptSource">
            <summary>
            Script source.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameReturnType.result">
            <summary>
            Object wrapper for the evaluation result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.EvaluateOnCallFrameReturnType.exceptionDetails">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.scriptId">
            <summary>
            Identifier of the script parsed.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.url">
            <summary>
            URL or name of the script parsed (if any).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.startLine">
            <summary>
            Line offset of the script within the resource with given URL (for script tags).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.startColumn">
            <summary>
            Column offset of the script within the resource with given URL.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.endLine">
            <summary>
            Last line of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.endColumn">
            <summary>
            Length of the last line of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.executionContextId">
            <summary>
            Specifies script creation context.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.hash">
            <summary>
            Content hash of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.executionContextAuxData">
            <summary>
            Embedder-specific auxiliary data.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.isLiveEdit">
            <summary>
            True, if this script is generated as a result of the live edit operation.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.sourceMapURL">
            <summary>
            URL of source map associated with script (if any).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.hasSourceURL">
            <summary>
            True, if this script has sourceURL.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.isModule">
            <summary>
            True, if this script is ES6 module.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.length">
            <summary>
            This script length.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptParsedEventDataType.stackTrace">
            <summary>
            JavaScript top stack frame of where the script parsed event was triggered if available.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.scriptId">
            <summary>
            Identifier of the script parsed.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.url">
            <summary>
            URL or name of the script parsed (if any).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.startLine">
            <summary>
            Line offset of the script within the resource with given URL (for script tags).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.startColumn">
            <summary>
            Column offset of the script within the resource with given URL.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.endLine">
            <summary>
            Last line of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.endColumn">
            <summary>
            Length of the last line of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.executionContextId">
            <summary>
            Specifies script creation context.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.hash">
            <summary>
            Content hash of the script.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.executionContextAuxData">
            <summary>
            Embedder-specific auxiliary data.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.sourceMapURL">
            <summary>
            URL of source map associated with script (if any).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.hasSourceURL">
            <summary>
            True, if this script has sourceURL.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.isModule">
            <summary>
            True, if this script is ES6 module.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.length">
            <summary>
            This script length.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.ScriptFailedToParseEventDataType.stackTrace">
            <summary>
            JavaScript top stack frame of where the script parsed event was triggered if available.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.BreakpointResolvedEventDataType.breakpointId">
            <summary>
            Breakpoint unique identifier.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.BreakpointResolvedEventDataType.location">
            <summary>
            Actual breakpoint location.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.PausedEventDataType.callFrames">
            <summary>
            Call stack the virtual machine stopped on.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.PausedEventDataType.reason">
            <summary>
            Pause reason.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.PausedEventDataType.data">
            <summary>
            Object containing break-specific auxiliary properties.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.PausedEventDataType.hitBreakpoints">
            <summary>
            Hit breakpoints IDs
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Debugger.PausedEventDataType.asyncStackTrace">
            <summary>
            Async stack trace, if any.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.BreakpointId">
            <summary>
            Breakpoint identifier.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Debugger.CallFrameId">
            <summary>
            Call frame identifier.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Console.ConsoleMessage">
            <summary>
            Console message.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.source">
            <summary>
            Message source.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.level">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.text">
            <summary>
            Message text.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.url">
            <summary>
            URL of the message origin.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.line">
            <summary>
            Line number in the resource that generated this message (1-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.ConsoleMessage.column">
            <summary>
            Column number in the resource that generated this message (1-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Console.MessageAddedEventDataType.message">
            <summary>
            Console message that has been added.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.ProfileNode">
            <summary>
            Profile node. Holds callsite information, execution statistics and child nodes.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.id">
            <summary>
            Unique id of the node.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.callFrame">
            <summary>
            Function location.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.hitCount">
            <summary>
            Number of samples where this node was on top of the call stack.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.children">
            <summary>
            Child node ids.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.deoptReason">
            <summary>
            The reason of being not optimized. The function may be deoptimized or marked as don't optimize.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ProfileNode.positionTicks">
            <summary>
            An array of source position ticks.
            @experimental
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.Profile">
            <summary>
            Profile.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.Profile.nodes">
            <summary>
            The list of profile nodes. First item is the root node.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.Profile.startTime">
            <summary>
            Profiling start timestamp in microseconds.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.Profile.endTime">
            <summary>
            Profiling end timestamp in microseconds.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.Profile.samples">
            <summary>
            Ids of samples top nodes.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.Profile.timeDeltas">
            <summary>
            Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.PositionTickInfo">
            <summary>
            Specifies a number of samples attributed to a certain source position.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.PositionTickInfo.line">
            <summary>
            Source line number (1-based).
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.PositionTickInfo.ticks">
            <summary>
            Number of samples attributed to the source line.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.CoverageRange">
            <summary>
            Coverage data for a source range.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.CoverageRange.startOffset">
            <summary>
            JavaScript script source offset for the range start.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.CoverageRange.endOffset">
            <summary>
            JavaScript script source offset for the range end.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.CoverageRange.count">
            <summary>
            Collected execution count of the source range.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.FunctionCoverage">
            <summary>
            Coverage data for a JavaScript function.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.FunctionCoverage.functionName">
            <summary>
            JavaScript function name.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.FunctionCoverage.ranges">
            <summary>
            Source ranges inside the function with coverage data.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.FunctionCoverage.isBlockCoverage">
            <summary>
            Whether coverage data for this function has block granularity.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Profiler.ScriptCoverage">
            <summary>
            Coverage data for a JavaScript script.
            @experimental
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ScriptCoverage.scriptId">
            <summary>
            JavaScript script id.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ScriptCoverage.url">
            <summary>
            JavaScript script name or url.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ScriptCoverage.functions">
            <summary>
            Functions contained in the script that has coverage data.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.SetSamplingIntervalParameterType.interval">
            <summary>
            New sampling interval in microseconds.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.StartPreciseCoverageParameterType.callCount">
            <summary>
            Collect accurate call counts beyond simple 'covered' or 'not covered'.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.StopReturnType.profile">
            <summary>
            Recorded profile.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.TakePreciseCoverageReturnType.result">
            <summary>
            Coverage data for the current isolate.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.GetBestEffortCoverageReturnType.result">
            <summary>
            Coverage data for the current isolate.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ConsoleProfileStartedEventDataType.location">
            <summary>
            Location of console.profile().
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ConsoleProfileStartedEventDataType.title">
            <summary>
            Profile title passed as an argument to console.profile().
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ConsoleProfileFinishedEventDataType.location">
            <summary>
            Location of console.profileEnd().
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.Profiler.ConsoleProfileFinishedEventDataType.title">
            <summary>
            Profile title passed as an argument to console.profile().
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.HeapProfiler.SamplingHeapProfileNode">
            <summary>
            Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.SamplingHeapProfileNode.callFrame">
            <summary>
            Function location.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.SamplingHeapProfileNode.selfSize">
            <summary>
            Allocations size in bytes for the node excluding children.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.SamplingHeapProfileNode.children">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.HeapProfiler.SamplingHeapProfile">
            <summary>
            Profile.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType.reportProgress">
            <summary>
            If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.TakeHeapSnapshotParameterType.reportProgress">
            <summary>
            If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType.objectGroup">
            <summary>
            Symbolic group name that can be used to release multiple objects.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.AddInspectedHeapObjectParameterType.heapObjectId">
            <summary>
            Heap snapshot object id to be accessible by means of $x command line API.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.GetHeapObjectIdParameterType.objectId">
            <summary>
            Identifier of the object to get heap object id for.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.StartSamplingParameterType.samplingInterval">
            <summary>
            Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.GetObjectByHeapObjectIdReturnType.result">
            <summary>
            Evaluation result.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.GetHeapObjectIdReturnType.heapSnapshotObjectId">
            <summary>
            Id of the heap snapshot object corresponding to the passed remote object id.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.StopSamplingReturnType.profile">
            <summary>
            Recorded sampling heap profile.
            </summary>
        </member>
        <member name="P:Retyped.node.inspector.HeapProfiler.HeapStatsUpdateEventDataType.statsUpdate">
            <summary>
            An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.HeapProfiler.HeapSnapshotObjectId">
            <summary>
            Heap snapshot object id.
            </summary>
        </member>
        <member name="T:Retyped.node.inspector.Session">
            <summary>
            The inspector.Session is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.#ctor">
            <summary>
            Create a new instance of the inspector.Session class. The inspector session needs to be connected through session.connect() before the messages can be dispatched to the inspector backend.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.connect">
            <summary>
            Connects a session to the inspector back-end. An exception will be thrown if there is already a connected session established either through the API or by a front-end connected to the Inspector WebSocket port.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.disconnect">
            <summary>
            Immediately close the session. All pending message callbacks will be called with an error. session.connect() will need to be called to be able to send messages again. Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(System.String)">
            <summary>
            Posts a message to the inspector back-end. callback will be notified when a response is received. callback is a function that accepts two optional arguments - error and message-specific result.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(System.String,System.Object)">
            <summary>
            Posts a message to the inspector back-end. callback will be notified when a response is received. callback is a function that accepts two optional arguments - error and message-specific result.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(System.String,System.Object,Retyped.node.inspector.Session.postFn)">
            <summary>
            Posts a message to the inspector back-end. callback will be notified when a response is received. callback is a function that accepts two optional arguments - error and message-specific result.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(System.String,Retyped.node.inspector.Session.postFn)">
            <summary>
            Posts a message to the inspector back-end. callback will be notified when a response is received. callback is a function that accepts two optional arguments - error and message-specific result.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Schema_getDomains)">
            <summary>
            Returns supported domains.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Schema_getDomains,Retyped.node.inspector.Session.postFn2)">
            <summary>
            Returns supported domains.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_evaluate)">
            <summary>
            Evaluates expression on global object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_evaluate,Retyped.node.inspector.Runtime.EvaluateParameterType)">
            <summary>
            Evaluates expression on global object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_evaluate,Retyped.node.inspector.Runtime.EvaluateParameterType,Retyped.node.inspector.Session.postFn3)">
            <summary>
            Evaluates expression on global object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_evaluate,Retyped.node.inspector.Session.postFn3)">
            <summary>
            Evaluates expression on global object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_awaitPromise)">
            <summary>
            Add handler to promise with given promise object id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_awaitPromise,Retyped.node.inspector.Runtime.AwaitPromiseParameterType)">
            <summary>
            Add handler to promise with given promise object id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_awaitPromise,Retyped.node.inspector.Runtime.AwaitPromiseParameterType,Retyped.node.inspector.Session.postFn4)">
            <summary>
            Add handler to promise with given promise object id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_awaitPromise,Retyped.node.inspector.Session.postFn4)">
            <summary>
            Add handler to promise with given promise object id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_callFunctionOn)">
            <summary>
            Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_callFunctionOn,Retyped.node.inspector.Runtime.CallFunctionOnParameterType)">
            <summary>
            Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_callFunctionOn,Retyped.node.inspector.Runtime.CallFunctionOnParameterType,Retyped.node.inspector.Session.postFn5)">
            <summary>
            Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_callFunctionOn,Retyped.node.inspector.Session.postFn5)">
            <summary>
            Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_getProperties)">
            <summary>
            Returns properties of a given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_getProperties,Retyped.node.inspector.Runtime.GetPropertiesParameterType)">
            <summary>
            Returns properties of a given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_getProperties,Retyped.node.inspector.Runtime.GetPropertiesParameterType,Retyped.node.inspector.Session.postFn6)">
            <summary>
            Returns properties of a given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_getProperties,Retyped.node.inspector.Session.postFn6)">
            <summary>
            Returns properties of a given object. Object group of the result is inherited from the target object.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObject)">
            <summary>
            Releases remote object with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObject,Retyped.node.inspector.Runtime.ReleaseObjectParameterType)">
            <summary>
            Releases remote object with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObject,Retyped.node.inspector.Runtime.ReleaseObjectParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Releases remote object with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObject,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Releases remote object with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObjectGroup)">
            <summary>
            Releases all remote objects that belong to a given group.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObjectGroup,Retyped.node.inspector.Runtime.ReleaseObjectGroupParameterType)">
            <summary>
            Releases all remote objects that belong to a given group.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObjectGroup,Retyped.node.inspector.Runtime.ReleaseObjectGroupParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Releases all remote objects that belong to a given group.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_releaseObjectGroup,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Releases all remote objects that belong to a given group.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runIfWaitingForDebugger)">
            <summary>
            Tells inspected instance to run if it was waiting for debugger to attach.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runIfWaitingForDebugger,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Tells inspected instance to run if it was waiting for debugger to attach.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_enable)">
            <summary>
            Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_enable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_disable)">
            <summary>
            Disables reporting of execution contexts creation.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_disable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Disables reporting of execution contexts creation.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_discardConsoleEntries)">
            <summary>
            Discards collected exceptions and console API calls.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_discardConsoleEntries,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Discards collected exceptions and console API calls.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_setCustomObjectFormatterEnabled)">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_setCustomObjectFormatterEnabled,Retyped.node.inspector.Runtime.SetCustomObjectFormatterEnabledParameterType)">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_setCustomObjectFormatterEnabled,Retyped.node.inspector.Runtime.SetCustomObjectFormatterEnabledParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_setCustomObjectFormatterEnabled,Retyped.node.inspector.Session.postFn7)">
            <summary>
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_compileScript)">
            <summary>
            Compiles expression.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_compileScript,Retyped.node.inspector.Runtime.CompileScriptParameterType)">
            <summary>
            Compiles expression.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_compileScript,Retyped.node.inspector.Runtime.CompileScriptParameterType,Retyped.node.inspector.Session.postFn8)">
            <summary>
            Compiles expression.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_compileScript,Retyped.node.inspector.Session.postFn8)">
            <summary>
            Compiles expression.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runScript)">
            <summary>
            Runs script with given id in a given context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runScript,Retyped.node.inspector.Runtime.RunScriptParameterType)">
            <summary>
            Runs script with given id in a given context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runScript,Retyped.node.inspector.Runtime.RunScriptParameterType,Retyped.node.inspector.Session.postFn9)">
            <summary>
            Runs script with given id in a given context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Runtime_runScript,Retyped.node.inspector.Session.postFn9)">
            <summary>
            Runs script with given id in a given context.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_enable)">
            <summary>
            Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_enable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_disable)">
            <summary>
            Disables debugger for given page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_disable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Disables debugger for given page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointsActive)">
            <summary>
            Activates / deactivates all breakpoints on the page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointsActive,Retyped.node.inspector.Debugger.SetBreakpointsActiveParameterType)">
            <summary>
            Activates / deactivates all breakpoints on the page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointsActive,Retyped.node.inspector.Debugger.SetBreakpointsActiveParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Activates / deactivates all breakpoints on the page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointsActive,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Activates / deactivates all breakpoints on the page.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setSkipAllPauses)">
            <summary>
            Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setSkipAllPauses,Retyped.node.inspector.Debugger.SetSkipAllPausesParameterType)">
            <summary>
            Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setSkipAllPauses,Retyped.node.inspector.Debugger.SetSkipAllPausesParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setSkipAllPauses,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointByUrl)">
            <summary>
            Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointByUrl,Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType)">
            <summary>
            Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointByUrl,Retyped.node.inspector.Debugger.SetBreakpointByUrlParameterType,Retyped.node.inspector.Session.postFn10)">
            <summary>
            Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpointByUrl,Retyped.node.inspector.Session.postFn10)">
            <summary>
            Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpoint)">
            <summary>
            Sets JavaScript breakpoint at a given location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpoint,Retyped.node.inspector.Debugger.SetBreakpointParameterType)">
            <summary>
            Sets JavaScript breakpoint at a given location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpoint,Retyped.node.inspector.Debugger.SetBreakpointParameterType,Retyped.node.inspector.Session.postFn11)">
            <summary>
            Sets JavaScript breakpoint at a given location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBreakpoint,Retyped.node.inspector.Session.postFn11)">
            <summary>
            Sets JavaScript breakpoint at a given location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_removeBreakpoint)">
            <summary>
            Removes JavaScript breakpoint.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_removeBreakpoint,Retyped.node.inspector.Debugger.RemoveBreakpointParameterType)">
            <summary>
            Removes JavaScript breakpoint.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_removeBreakpoint,Retyped.node.inspector.Debugger.RemoveBreakpointParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Removes JavaScript breakpoint.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_removeBreakpoint,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Removes JavaScript breakpoint.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getPossibleBreakpoints)">
            <summary>
            Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getPossibleBreakpoints,Retyped.node.inspector.Debugger.GetPossibleBreakpointsParameterType)">
            <summary>
            Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getPossibleBreakpoints,Retyped.node.inspector.Debugger.GetPossibleBreakpointsParameterType,Retyped.node.inspector.Session.postFn12)">
            <summary>
            Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getPossibleBreakpoints,Retyped.node.inspector.Session.postFn12)">
            <summary>
            Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_continueToLocation)">
            <summary>
            Continues execution until specific location is reached.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_continueToLocation,Retyped.node.inspector.Debugger.ContinueToLocationParameterType)">
            <summary>
            Continues execution until specific location is reached.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_continueToLocation,Retyped.node.inspector.Debugger.ContinueToLocationParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Continues execution until specific location is reached.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_continueToLocation,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Continues execution until specific location is reached.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepOver)">
            <summary>
            Steps over the statement.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepOver,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Steps over the statement.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepInto)">
            <summary>
            Steps into the function call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepInto,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Steps into the function call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepOut)">
            <summary>
            Steps out of the function call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_stepOut,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Steps out of the function call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_pause)">
            <summary>
            Stops on the next JavaScript statement.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_pause,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Stops on the next JavaScript statement.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_scheduleStepIntoAsync)">
            <summary>
            Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_scheduleStepIntoAsync,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_resume)">
            <summary>
            Resumes JavaScript execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_resume,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Resumes JavaScript execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_searchInContent)">
            <summary>
            Searches for given string in script content.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_searchInContent,Retyped.node.inspector.Debugger.SearchInContentParameterType)">
            <summary>
            Searches for given string in script content.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_searchInContent,Retyped.node.inspector.Debugger.SearchInContentParameterType,Retyped.node.inspector.Session.postFn13)">
            <summary>
            Searches for given string in script content.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_searchInContent,Retyped.node.inspector.Session.postFn13)">
            <summary>
            Searches for given string in script content.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setScriptSource)">
            <summary>
            Edits JavaScript source live.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setScriptSource,Retyped.node.inspector.Debugger.SetScriptSourceParameterType)">
            <summary>
            Edits JavaScript source live.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setScriptSource,Retyped.node.inspector.Debugger.SetScriptSourceParameterType,Retyped.node.inspector.Session.postFn14)">
            <summary>
            Edits JavaScript source live.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setScriptSource,Retyped.node.inspector.Session.postFn14)">
            <summary>
            Edits JavaScript source live.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_restartFrame)">
            <summary>
            Restarts particular call frame from the beginning.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_restartFrame,Retyped.node.inspector.Debugger.RestartFrameParameterType)">
            <summary>
            Restarts particular call frame from the beginning.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_restartFrame,Retyped.node.inspector.Debugger.RestartFrameParameterType,Retyped.node.inspector.Session.postFn15)">
            <summary>
            Restarts particular call frame from the beginning.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_restartFrame,Retyped.node.inspector.Session.postFn15)">
            <summary>
            Restarts particular call frame from the beginning.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getScriptSource)">
            <summary>
            Returns source for the script with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getScriptSource,Retyped.node.inspector.Debugger.GetScriptSourceParameterType)">
            <summary>
            Returns source for the script with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getScriptSource,Retyped.node.inspector.Debugger.GetScriptSourceParameterType,Retyped.node.inspector.Session.postFn16)">
            <summary>
            Returns source for the script with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_getScriptSource,Retyped.node.inspector.Session.postFn16)">
            <summary>
            Returns source for the script with given id.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setPauseOnExceptions)">
            <summary>
            Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setPauseOnExceptions,Retyped.node.inspector.Debugger.SetPauseOnExceptionsParameterType)">
            <summary>
            Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setPauseOnExceptions,Retyped.node.inspector.Debugger.SetPauseOnExceptionsParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setPauseOnExceptions,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_evaluateOnCallFrame)">
            <summary>
            Evaluates expression on a given call frame.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_evaluateOnCallFrame,Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType)">
            <summary>
            Evaluates expression on a given call frame.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_evaluateOnCallFrame,Retyped.node.inspector.Debugger.EvaluateOnCallFrameParameterType,Retyped.node.inspector.Session.postFn17)">
            <summary>
            Evaluates expression on a given call frame.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_evaluateOnCallFrame,Retyped.node.inspector.Session.postFn17)">
            <summary>
            Evaluates expression on a given call frame.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setVariableValue)">
            <summary>
            Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setVariableValue,Retyped.node.inspector.Debugger.SetVariableValueParameterType)">
            <summary>
            Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setVariableValue,Retyped.node.inspector.Debugger.SetVariableValueParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setVariableValue,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setAsyncCallStackDepth)">
            <summary>
            Enables or disables async call stacks tracking.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setAsyncCallStackDepth,Retyped.node.inspector.Debugger.SetAsyncCallStackDepthParameterType)">
            <summary>
            Enables or disables async call stacks tracking.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setAsyncCallStackDepth,Retyped.node.inspector.Debugger.SetAsyncCallStackDepthParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables or disables async call stacks tracking.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setAsyncCallStackDepth,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables or disables async call stacks tracking.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxPatterns)">
            <summary>
            Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxPatterns,Retyped.node.inspector.Debugger.SetBlackboxPatternsParameterType)">
            <summary>
            Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxPatterns,Retyped.node.inspector.Debugger.SetBlackboxPatternsParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxPatterns,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxedRanges)">
            <summary>
            Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxedRanges,Retyped.node.inspector.Debugger.SetBlackboxedRangesParameterType)">
            <summary>
            Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxedRanges,Retyped.node.inspector.Debugger.SetBlackboxedRangesParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Debugger_setBlackboxedRanges,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_enable)">
            <summary>
            Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_enable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_disable)">
            <summary>
            Disables console domain, prevents further console messages from being reported to the client.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_disable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Disables console domain, prevents further console messages from being reported to the client.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_clearMessages)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Console_clearMessages,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_enable)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_enable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_disable)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_disable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_setSamplingInterval)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_setSamplingInterval,Retyped.node.inspector.Profiler.SetSamplingIntervalParameterType)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_setSamplingInterval,Retyped.node.inspector.Profiler.SetSamplingIntervalParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_setSamplingInterval,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_start)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_start,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_stop)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_stop,Retyped.node.inspector.Session.postFn18)">
            <summary>
            Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_startPreciseCoverage)">
            <summary>
            Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_startPreciseCoverage,Retyped.node.inspector.Profiler.StartPreciseCoverageParameterType)">
            <summary>
            Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_startPreciseCoverage,Retyped.node.inspector.Profiler.StartPreciseCoverageParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_startPreciseCoverage,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_stopPreciseCoverage)">
            <summary>
            Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_stopPreciseCoverage,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_takePreciseCoverage)">
            <summary>
            Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_takePreciseCoverage,Retyped.node.inspector.Session.postFn19)">
            <summary>
            Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_getBestEffortCoverage)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.Profiler_getBestEffortCoverage,Retyped.node.inspector.Session.postFn20)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_enable)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_enable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_disable)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_disable,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startTrackingHeapObjects)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startTrackingHeapObjects,Retyped.node.inspector.HeapProfiler.StartTrackingHeapObjectsParameterType)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startTrackingHeapObjects,Retyped.node.inspector.HeapProfiler.StartTrackingHeapObjectsParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startTrackingHeapObjects,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopTrackingHeapObjects)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopTrackingHeapObjects,Retyped.node.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopTrackingHeapObjects,Retyped.node.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopTrackingHeapObjects,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_takeHeapSnapshot)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_takeHeapSnapshot,Retyped.node.inspector.HeapProfiler.TakeHeapSnapshotParameterType)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_takeHeapSnapshot,Retyped.node.inspector.HeapProfiler.TakeHeapSnapshotParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_takeHeapSnapshot,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_collectGarbage)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_collectGarbage,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getObjectByHeapObjectId)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getObjectByHeapObjectId,Retyped.node.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getObjectByHeapObjectId,Retyped.node.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType,Retyped.node.inspector.Session.postFn21)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getObjectByHeapObjectId,Retyped.node.inspector.Session.postFn21)">
            <summary>
            Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            @experimental
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_addInspectedHeapObject)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_addInspectedHeapObject,Retyped.node.inspector.HeapProfiler.AddInspectedHeapObjectParameterType)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_addInspectedHeapObject,Retyped.node.inspector.HeapProfiler.AddInspectedHeapObjectParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_addInspectedHeapObject,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getHeapObjectId)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getHeapObjectId,Retyped.node.inspector.HeapProfiler.GetHeapObjectIdParameterType)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getHeapObjectId,Retyped.node.inspector.HeapProfiler.GetHeapObjectIdParameterType,Retyped.node.inspector.Session.postFn22)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_getHeapObjectId,Retyped.node.inspector.Session.postFn22)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startSampling)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startSampling,Retyped.node.inspector.HeapProfiler.StartSamplingParameterType)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startSampling,Retyped.node.inspector.HeapProfiler.StartSamplingParameterType,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_startSampling,Retyped.node.inspector.Session.postFn7)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopSampling)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.post(Retyped.node.Literals.Types.HeapProfiler_stopSampling,Retyped.node.inspector.Session.postFn23)">
            <summary>
            Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.inspectorNotification,Retyped.node.inspector.Session.addListenerFn2)">
            <summary>
            Emitted when any notification from the V8 Inspector is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_executionContextCreated,Retyped.node.inspector.Session.addListenerFn3)">
            <summary>
            Issued when new execution context is created.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_executionContextDestroyed,Retyped.node.inspector.Session.addListenerFn4)">
            <summary>
            Issued when execution context is destroyed.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_executionContextsCleared,System.Action)">
            <summary>
            Issued when all executionContexts were cleared in browser
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_exceptionThrown,Retyped.node.inspector.Session.addListenerFn5)">
            <summary>
            Issued when exception was thrown and unhandled.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_exceptionRevoked,Retyped.node.inspector.Session.addListenerFn6)">
            <summary>
            Issued when unhandled exception was revoked.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_consoleAPICalled,Retyped.node.inspector.Session.addListenerFn7)">
            <summary>
            Issued when console API was called.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Runtime_inspectRequested,Retyped.node.inspector.Session.addListenerFn8)">
            <summary>
            Issued when object should be inspected (for example, as a result of inspect() command line API call).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Debugger_scriptParsed,Retyped.node.inspector.Session.addListenerFn9)">
            <summary>
            Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Debugger_scriptFailedToParse,Retyped.node.inspector.Session.addListenerFn10)">
            <summary>
            Fired when virtual machine fails to parse the script.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Debugger_breakpointResolved,Retyped.node.inspector.Session.addListenerFn11)">
            <summary>
            Fired when breakpoint is resolved to an actual script and location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Debugger_paused,Retyped.node.inspector.Session.addListenerFn12)">
            <summary>
            Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Debugger_resumed,System.Action)">
            <summary>
            Fired when the virtual machine resumed execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Console_messageAdded,Retyped.node.inspector.Session.addListenerFn13)">
            <summary>
            Issued when new console message is added.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Profiler_consoleProfileStarted,Retyped.node.inspector.Session.addListenerFn14)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.Profiler_consoleProfileFinished,Retyped.node.inspector.Session.addListenerFn15)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.HeapProfiler_addHeapSnapshotChunk,Retyped.node.inspector.Session.addListenerFn16)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.HeapProfiler_resetProfiles,System.Action)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.HeapProfiler_reportHeapSnapshotProgress,Retyped.node.inspector.Session.addListenerFn17)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.HeapProfiler_lastSeenObjectId,Retyped.node.inspector.Session.addListenerFn18)">
            <summary>
            If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.addListener(Retyped.node.Literals.Types.HeapProfiler_heapStatsUpdate,Retyped.node.inspector.Session.addListenerFn19)">
            <summary>
            If heap objects tracking has been started then backend may send update for one or more fragments
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.inspectorNotification,Retyped.node.inspector.Session.onFn2)">
            <summary>
            Emitted when any notification from the V8 Inspector is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_executionContextCreated,Retyped.node.inspector.Session.onFn3)">
            <summary>
            Issued when new execution context is created.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_executionContextDestroyed,Retyped.node.inspector.Session.onFn4)">
            <summary>
            Issued when execution context is destroyed.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_executionContextsCleared,System.Action)">
            <summary>
            Issued when all executionContexts were cleared in browser
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_exceptionThrown,Retyped.node.inspector.Session.onFn5)">
            <summary>
            Issued when exception was thrown and unhandled.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_exceptionRevoked,Retyped.node.inspector.Session.onFn6)">
            <summary>
            Issued when unhandled exception was revoked.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_consoleAPICalled,Retyped.node.inspector.Session.onFn7)">
            <summary>
            Issued when console API was called.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Runtime_inspectRequested,Retyped.node.inspector.Session.onFn8)">
            <summary>
            Issued when object should be inspected (for example, as a result of inspect() command line API call).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Debugger_scriptParsed,Retyped.node.inspector.Session.onFn9)">
            <summary>
            Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Debugger_scriptFailedToParse,Retyped.node.inspector.Session.onFn10)">
            <summary>
            Fired when virtual machine fails to parse the script.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Debugger_breakpointResolved,Retyped.node.inspector.Session.onFn11)">
            <summary>
            Fired when breakpoint is resolved to an actual script and location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Debugger_paused,Retyped.node.inspector.Session.onFn12)">
            <summary>
            Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Debugger_resumed,System.Action)">
            <summary>
            Fired when the virtual machine resumed execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Console_messageAdded,Retyped.node.inspector.Session.onFn13)">
            <summary>
            Issued when new console message is added.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Profiler_consoleProfileStarted,Retyped.node.inspector.Session.onFn14)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.Profiler_consoleProfileFinished,Retyped.node.inspector.Session.onFn15)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.HeapProfiler_addHeapSnapshotChunk,Retyped.node.inspector.Session.onFn16)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.HeapProfiler_resetProfiles,System.Action)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.HeapProfiler_reportHeapSnapshotProgress,Retyped.node.inspector.Session.onFn17)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.HeapProfiler_lastSeenObjectId,Retyped.node.inspector.Session.onFn18)">
            <summary>
            If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.on(Retyped.node.Literals.Types.HeapProfiler_heapStatsUpdate,Retyped.node.inspector.Session.onFn19)">
            <summary>
            If heap objects tracking has been started then backend may send update for one or more fragments
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.inspectorNotification,Retyped.node.inspector.Session.onceFn2)">
            <summary>
            Emitted when any notification from the V8 Inspector is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_executionContextCreated,Retyped.node.inspector.Session.onceFn3)">
            <summary>
            Issued when new execution context is created.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_executionContextDestroyed,Retyped.node.inspector.Session.onceFn4)">
            <summary>
            Issued when execution context is destroyed.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_executionContextsCleared,System.Action)">
            <summary>
            Issued when all executionContexts were cleared in browser
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_exceptionThrown,Retyped.node.inspector.Session.onceFn5)">
            <summary>
            Issued when exception was thrown and unhandled.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_exceptionRevoked,Retyped.node.inspector.Session.onceFn6)">
            <summary>
            Issued when unhandled exception was revoked.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_consoleAPICalled,Retyped.node.inspector.Session.onceFn7)">
            <summary>
            Issued when console API was called.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Runtime_inspectRequested,Retyped.node.inspector.Session.onceFn8)">
            <summary>
            Issued when object should be inspected (for example, as a result of inspect() command line API call).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Debugger_scriptParsed,Retyped.node.inspector.Session.onceFn9)">
            <summary>
            Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Debugger_scriptFailedToParse,Retyped.node.inspector.Session.onceFn10)">
            <summary>
            Fired when virtual machine fails to parse the script.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Debugger_breakpointResolved,Retyped.node.inspector.Session.onceFn11)">
            <summary>
            Fired when breakpoint is resolved to an actual script and location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Debugger_paused,Retyped.node.inspector.Session.onceFn12)">
            <summary>
            Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Debugger_resumed,System.Action)">
            <summary>
            Fired when the virtual machine resumed execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Console_messageAdded,Retyped.node.inspector.Session.onceFn13)">
            <summary>
            Issued when new console message is added.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Profiler_consoleProfileStarted,Retyped.node.inspector.Session.onceFn14)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.Profiler_consoleProfileFinished,Retyped.node.inspector.Session.onceFn15)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.HeapProfiler_addHeapSnapshotChunk,Retyped.node.inspector.Session.onceFn16)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.HeapProfiler_resetProfiles,System.Action)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.HeapProfiler_reportHeapSnapshotProgress,Retyped.node.inspector.Session.onceFn17)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.HeapProfiler_lastSeenObjectId,Retyped.node.inspector.Session.onceFn18)">
            <summary>
            If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.once(Retyped.node.Literals.Types.HeapProfiler_heapStatsUpdate,Retyped.node.inspector.Session.onceFn19)">
            <summary>
            If heap objects tracking has been started then backend may send update for one or more fragments
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.inspectorNotification,Retyped.node.inspector.Session.prependListenerFn2)">
            <summary>
            Emitted when any notification from the V8 Inspector is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_executionContextCreated,Retyped.node.inspector.Session.prependListenerFn3)">
            <summary>
            Issued when new execution context is created.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_executionContextDestroyed,Retyped.node.inspector.Session.prependListenerFn4)">
            <summary>
            Issued when execution context is destroyed.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_executionContextsCleared,System.Action)">
            <summary>
            Issued when all executionContexts were cleared in browser
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_exceptionThrown,Retyped.node.inspector.Session.prependListenerFn5)">
            <summary>
            Issued when exception was thrown and unhandled.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_exceptionRevoked,Retyped.node.inspector.Session.prependListenerFn6)">
            <summary>
            Issued when unhandled exception was revoked.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_consoleAPICalled,Retyped.node.inspector.Session.prependListenerFn7)">
            <summary>
            Issued when console API was called.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Runtime_inspectRequested,Retyped.node.inspector.Session.prependListenerFn8)">
            <summary>
            Issued when object should be inspected (for example, as a result of inspect() command line API call).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Debugger_scriptParsed,Retyped.node.inspector.Session.prependListenerFn9)">
            <summary>
            Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Debugger_scriptFailedToParse,Retyped.node.inspector.Session.prependListenerFn10)">
            <summary>
            Fired when virtual machine fails to parse the script.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Debugger_breakpointResolved,Retyped.node.inspector.Session.prependListenerFn11)">
            <summary>
            Fired when breakpoint is resolved to an actual script and location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Debugger_paused,Retyped.node.inspector.Session.prependListenerFn12)">
            <summary>
            Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Debugger_resumed,System.Action)">
            <summary>
            Fired when the virtual machine resumed execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Console_messageAdded,Retyped.node.inspector.Session.prependListenerFn13)">
            <summary>
            Issued when new console message is added.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Profiler_consoleProfileStarted,Retyped.node.inspector.Session.prependListenerFn14)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.Profiler_consoleProfileFinished,Retyped.node.inspector.Session.prependListenerFn15)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.HeapProfiler_addHeapSnapshotChunk,Retyped.node.inspector.Session.prependListenerFn16)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.HeapProfiler_resetProfiles,System.Action)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.HeapProfiler_reportHeapSnapshotProgress,Retyped.node.inspector.Session.prependListenerFn17)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.HeapProfiler_lastSeenObjectId,Retyped.node.inspector.Session.prependListenerFn18)">
            <summary>
            If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependListener(Retyped.node.Literals.Types.HeapProfiler_heapStatsUpdate,Retyped.node.inspector.Session.prependListenerFn19)">
            <summary>
            If heap objects tracking has been started then backend may send update for one or more fragments
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.inspectorNotification,Retyped.node.inspector.Session.prependOnceListenerFn2)">
            <summary>
            Emitted when any notification from the V8 Inspector is received.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_executionContextCreated,Retyped.node.inspector.Session.prependOnceListenerFn3)">
            <summary>
            Issued when new execution context is created.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_executionContextDestroyed,Retyped.node.inspector.Session.prependOnceListenerFn4)">
            <summary>
            Issued when execution context is destroyed.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_executionContextsCleared,System.Action)">
            <summary>
            Issued when all executionContexts were cleared in browser
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_exceptionThrown,Retyped.node.inspector.Session.prependOnceListenerFn5)">
            <summary>
            Issued when exception was thrown and unhandled.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_exceptionRevoked,Retyped.node.inspector.Session.prependOnceListenerFn6)">
            <summary>
            Issued when unhandled exception was revoked.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_consoleAPICalled,Retyped.node.inspector.Session.prependOnceListenerFn7)">
            <summary>
            Issued when console API was called.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Runtime_inspectRequested,Retyped.node.inspector.Session.prependOnceListenerFn8)">
            <summary>
            Issued when object should be inspected (for example, as a result of inspect() command line API call).
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Debugger_scriptParsed,Retyped.node.inspector.Session.prependOnceListenerFn9)">
            <summary>
            Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Debugger_scriptFailedToParse,Retyped.node.inspector.Session.prependOnceListenerFn10)">
            <summary>
            Fired when virtual machine fails to parse the script.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Debugger_breakpointResolved,Retyped.node.inspector.Session.prependOnceListenerFn11)">
            <summary>
            Fired when breakpoint is resolved to an actual script and location.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Debugger_paused,Retyped.node.inspector.Session.prependOnceListenerFn12)">
            <summary>
            Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Debugger_resumed,System.Action)">
            <summary>
            Fired when the virtual machine resumed execution.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Console_messageAdded,Retyped.node.inspector.Session.prependOnceListenerFn13)">
            <summary>
            Issued when new console message is added.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Profiler_consoleProfileStarted,Retyped.node.inspector.Session.prependOnceListenerFn14)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.Profiler_consoleProfileFinished,Retyped.node.inspector.Session.prependOnceListenerFn15)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.HeapProfiler_addHeapSnapshotChunk,Retyped.node.inspector.Session.prependOnceListenerFn16)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.HeapProfiler_resetProfiles,System.Action)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.HeapProfiler_reportHeapSnapshotProgress,Retyped.node.inspector.Session.prependOnceListenerFn17)">
            <summary>
            Sent when new profile recording is started using console.profile() call.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.HeapProfiler_lastSeenObjectId,Retyped.node.inspector.Session.prependOnceListenerFn18)">
            <summary>
            If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            </summary>
        </member>
        <member name="M:Retyped.node.inspector.Session.prependOnceListener(Retyped.node.Literals.Types.HeapProfiler_heapStatsUpdate,Retyped.node.inspector.Session.prependOnceListenerFn19)">
            <summary>
            If heap objects tracking has been started then backend may send update for one or more fragments
            </summary>
        </member>
    </members>
</doc>
